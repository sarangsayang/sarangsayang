"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return createLocal;
    }
});
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _getFileByPath = /*#__PURE__*/ _interop_require_default(require("../../../uploads/getFileByPath"));
const _dataloader = require("../../dataloader");
const _create = /*#__PURE__*/ _interop_require_default(require("../create"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function createLocal(payload, options) {
    const { collection: collectionSlug, context, data, depth, disableVerificationEmail, draft, fallbackLocale: fallbackLocaleArg = options?.req?.fallbackLocale, file, filePath, locale: localeArg = null, overrideAccess = true, overwriteExistingFiles = false, req = {}, showHiddenFields, user } = options;
    (0, _setRequestContext.setRequestContext)(req, context);
    const collection = payload.collections[collectionSlug];
    const localizationConfig = payload?.config?.localization;
    const defaultLocale = localizationConfig ? localizationConfig.defaultLocale : null;
    const locale = localeArg || req.locale || defaultLocale;
    const fallbackLocale = localizationConfig ? localizationConfig.locales.find(({ code })=>locale === code)?.fallbackLocale : null;
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Create Operation.`);
    }
    req.payloadAPI = req.payloadAPI || 'local';
    req.locale = locale;
    req.fallbackLocale = typeof fallbackLocaleArg !== 'undefined' ? fallbackLocaleArg : fallbackLocale || defaultLocale;
    req.payload = payload;
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    req.files = {
        file: file ?? await (0, _getFileByPath.default)(filePath)
    };
    if (typeof user !== 'undefined') req.user = user;
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _create.default)({
        collection,
        data,
        depth,
        disableVerificationEmail,
        draft,
        overrideAccess,
        overwriteExistingFiles,
        req,
        showHiddenFields
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL2xvY2FsL2NyZWF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFVwbG9hZGVkRmlsZSB9IGZyb20gJ2V4cHJlc3MtZmlsZXVwbG9hZCdcbmltcG9ydCB0eXBlIHsgTWFya09wdGlvbmFsIH0gZnJvbSAndHMtZXNzZW50aWFscydcblxuaW1wb3J0IHR5cGUgeyBHZW5lcmF0ZWRUeXBlcyB9IGZyb20gJy4uLy4uLy4uLydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QsIFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy90eXBlcydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZCB9IGZyb20gJy4uLy4uLy4uL3BheWxvYWQnXG5pbXBvcnQgdHlwZSB7IERvY3VtZW50IH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5pbXBvcnQgdHlwZSB7IEZpbGUgfSBmcm9tICcuLi8uLi8uLi91cGxvYWRzL3R5cGVzJ1xuXG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycydcbmltcG9ydCB7IHNldFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy9zZXRSZXF1ZXN0Q29udGV4dCdcbmltcG9ydCB7IGkxOG5Jbml0IH0gZnJvbSAnLi4vLi4vLi4vdHJhbnNsYXRpb25zL2luaXQnXG5pbXBvcnQgZ2V0RmlsZUJ5UGF0aCBmcm9tICcuLi8uLi8uLi91cGxvYWRzL2dldEZpbGVCeVBhdGgnXG5pbXBvcnQgeyBnZXREYXRhTG9hZGVyIH0gZnJvbSAnLi4vLi4vZGF0YWxvYWRlcidcbmltcG9ydCBjcmVhdGUgZnJvbSAnLi4vY3JlYXRlJ1xuXG5leHBvcnQgdHlwZSBPcHRpb25zPFRTbHVnIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+ID0ge1xuICBjb2xsZWN0aW9uOiBUU2x1Z1xuICAvKipcbiAgICogY29udGV4dCwgd2hpY2ggd2lsbCB0aGVuIGJlIHBhc3NlZCB0byByZXEuY29udGV4dCwgd2hpY2ggY2FuIGJlIHJlYWQgYnkgaG9va3NcbiAgICovXG4gIGNvbnRleHQ/OiBSZXF1ZXN0Q29udGV4dFxuICBkYXRhOiBNYXJrT3B0aW9uYWw8XG4gICAgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ11bVFNsdWddLFxuICAgICdjcmVhdGVkQXQnIHwgJ2lkJyB8ICdzaXplcycgfCAndXBkYXRlZEF0J1xuICA+XG4gIGRlcHRoPzogbnVtYmVyXG4gIGRpc2FibGVWZXJpZmljYXRpb25FbWFpbD86IGJvb2xlYW5cbiAgZHJhZnQ/OiBib29sZWFuXG4gIGZhbGxiYWNrTG9jYWxlPzogc3RyaW5nXG4gIGZpbGU/OiBGaWxlXG4gIGZpbGVQYXRoPzogc3RyaW5nXG4gIGxvY2FsZT86IHN0cmluZ1xuICBvdmVycmlkZUFjY2Vzcz86IGJvb2xlYW5cbiAgb3ZlcndyaXRlRXhpc3RpbmdGaWxlcz86IGJvb2xlYW5cbiAgcmVxPzogUGF5bG9hZFJlcXVlc3RcbiAgc2hvd0hpZGRlbkZpZWxkcz86IGJvb2xlYW5cbiAgdXNlcj86IERvY3VtZW50XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsPFRTbHVnIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBPcHRpb25zPFRTbHVnPixcbik6IFByb21pc2U8R2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ11bVFNsdWddPiB7XG4gIGNvbnN0IHtcbiAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uU2x1ZyxcbiAgICBjb250ZXh0LFxuICAgIGRhdGEsXG4gICAgZGVwdGgsXG4gICAgZGlzYWJsZVZlcmlmaWNhdGlvbkVtYWlsLFxuICAgIGRyYWZ0LFxuICAgIGZhbGxiYWNrTG9jYWxlOiBmYWxsYmFja0xvY2FsZUFyZyA9IG9wdGlvbnM/LnJlcT8uZmFsbGJhY2tMb2NhbGUsXG4gICAgZmlsZSxcbiAgICBmaWxlUGF0aCxcbiAgICBsb2NhbGU6IGxvY2FsZUFyZyA9IG51bGwsXG4gICAgb3ZlcnJpZGVBY2Nlc3MgPSB0cnVlLFxuICAgIG92ZXJ3cml0ZUV4aXN0aW5nRmlsZXMgPSBmYWxzZSxcbiAgICByZXEgPSB7fSBhcyBQYXlsb2FkUmVxdWVzdCxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgIHVzZXIsXG4gIH0gPSBvcHRpb25zXG4gIHNldFJlcXVlc3RDb250ZXh0KHJlcSwgY29udGV4dClcblxuICBjb25zdCBjb2xsZWN0aW9uID0gcGF5bG9hZC5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uU2x1Z11cbiAgY29uc3QgbG9jYWxpemF0aW9uQ29uZmlnID0gcGF5bG9hZD8uY29uZmlnPy5sb2NhbGl6YXRpb25cbiAgY29uc3QgZGVmYXVsdExvY2FsZSA9IGxvY2FsaXphdGlvbkNvbmZpZyA/IGxvY2FsaXphdGlvbkNvbmZpZy5kZWZhdWx0TG9jYWxlIDogbnVsbFxuICBjb25zdCBsb2NhbGUgPSBsb2NhbGVBcmcgfHwgcmVxLmxvY2FsZSB8fCBkZWZhdWx0TG9jYWxlXG4gIGNvbnN0IGZhbGxiYWNrTG9jYWxlID0gbG9jYWxpemF0aW9uQ29uZmlnXG4gICAgPyBsb2NhbGl6YXRpb25Db25maWcubG9jYWxlcy5maW5kKCh7IGNvZGUgfSkgPT4gbG9jYWxlID09PSBjb2RlKT8uZmFsbGJhY2tMb2NhbGVcbiAgICA6IG51bGxcblxuICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoXG4gICAgICBgVGhlIGNvbGxlY3Rpb24gd2l0aCBzbHVnICR7U3RyaW5nKGNvbGxlY3Rpb25TbHVnKX0gY2FuJ3QgYmUgZm91bmQuIENyZWF0ZSBPcGVyYXRpb24uYCxcbiAgICApXG4gIH1cblxuICByZXEucGF5bG9hZEFQSSA9IHJlcS5wYXlsb2FkQVBJIHx8ICdsb2NhbCdcbiAgcmVxLmxvY2FsZSA9IGxvY2FsZVxuICByZXEuZmFsbGJhY2tMb2NhbGUgPVxuICAgIHR5cGVvZiBmYWxsYmFja0xvY2FsZUFyZyAhPT0gJ3VuZGVmaW5lZCcgPyBmYWxsYmFja0xvY2FsZUFyZyA6IGZhbGxiYWNrTG9jYWxlIHx8IGRlZmF1bHRMb2NhbGVcbiAgcmVxLnBheWxvYWQgPSBwYXlsb2FkXG4gIHJlcS5pMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcbiAgcmVxLmZpbGVzID0ge1xuICAgIGZpbGU6IChmaWxlID8/IChhd2FpdCBnZXRGaWxlQnlQYXRoKGZpbGVQYXRoKSkpIGFzIFVwbG9hZGVkRmlsZSxcbiAgfVxuXG4gIGlmICh0eXBlb2YgdXNlciAhPT0gJ3VuZGVmaW5lZCcpIHJlcS51c2VyID0gdXNlclxuXG4gIGlmICghcmVxLnQpIHJlcS50ID0gcmVxLmkxOG4udFxuICBpZiAoIXJlcS5wYXlsb2FkRGF0YUxvYWRlcikgcmVxLnBheWxvYWREYXRhTG9hZGVyID0gZ2V0RGF0YUxvYWRlcihyZXEpXG5cbiAgcmV0dXJuIGNyZWF0ZTxUU2x1Zz4oe1xuICAgIGNvbGxlY3Rpb24sXG4gICAgZGF0YSxcbiAgICBkZXB0aCxcbiAgICBkaXNhYmxlVmVyaWZpY2F0aW9uRW1haWwsXG4gICAgZHJhZnQsXG4gICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgb3ZlcndyaXRlRXhpc3RpbmdGaWxlcyxcbiAgICByZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVMb2NhbCIsInBheWxvYWQiLCJvcHRpb25zIiwiY29sbGVjdGlvbiIsImNvbGxlY3Rpb25TbHVnIiwiY29udGV4dCIsImRhdGEiLCJkZXB0aCIsImRpc2FibGVWZXJpZmljYXRpb25FbWFpbCIsImRyYWZ0IiwiZmFsbGJhY2tMb2NhbGUiLCJmYWxsYmFja0xvY2FsZUFyZyIsInJlcSIsImZpbGUiLCJmaWxlUGF0aCIsImxvY2FsZSIsImxvY2FsZUFyZyIsIm92ZXJyaWRlQWNjZXNzIiwib3ZlcndyaXRlRXhpc3RpbmdGaWxlcyIsInNob3dIaWRkZW5GaWVsZHMiLCJ1c2VyIiwic2V0UmVxdWVzdENvbnRleHQiLCJjb2xsZWN0aW9ucyIsImxvY2FsaXphdGlvbkNvbmZpZyIsImNvbmZpZyIsImxvY2FsaXphdGlvbiIsImRlZmF1bHRMb2NhbGUiLCJsb2NhbGVzIiwiZmluZCIsImNvZGUiLCJBUElFcnJvciIsIlN0cmluZyIsInBheWxvYWRBUEkiLCJpMThuIiwiaTE4bkluaXQiLCJmaWxlcyIsImdldEZpbGVCeVBhdGgiLCJ0IiwicGF5bG9hZERhdGFMb2FkZXIiLCJnZXREYXRhTG9hZGVyIiwiY3JlYXRlIl0sIm1hcHBpbmdzIjoiOzs7OytCQXdDQTs7O2VBQThCQTs7O3dCQS9CTDttQ0FDUztzQkFDVDtzRUFDQzs0QkFDSTsrREFDWDs7Ozs7O0FBMEJKLGVBQWVBLFlBQzVCQyxPQUFnQixFQUNoQkMsT0FBdUI7SUFFdkIsTUFBTSxFQUNKQyxZQUFZQyxjQUFjLEVBQzFCQyxPQUFPLEVBQ1BDLElBQUksRUFDSkMsS0FBSyxFQUNMQyx3QkFBd0IsRUFDeEJDLEtBQUssRUFDTEMsZ0JBQWdCQyxvQkFBb0JULFNBQVNVLEtBQUtGLGNBQWMsRUFDaEVHLElBQUksRUFDSkMsUUFBUSxFQUNSQyxRQUFRQyxZQUFZLElBQUksRUFDeEJDLGlCQUFpQixJQUFJLEVBQ3JCQyx5QkFBeUIsS0FBSyxFQUM5Qk4sTUFBTSxDQUFDLENBQW1CLEVBQzFCTyxnQkFBZ0IsRUFDaEJDLElBQUksRUFDTCxHQUFHbEI7SUFDSm1CLElBQUFBLG9DQUFpQixFQUFDVCxLQUFLUDtJQUV2QixNQUFNRixhQUFhRixRQUFRcUIsV0FBVyxDQUFDbEIsZUFBZTtJQUN0RCxNQUFNbUIscUJBQXFCdEIsU0FBU3VCLFFBQVFDO0lBQzVDLE1BQU1DLGdCQUFnQkgscUJBQXFCQSxtQkFBbUJHLGFBQWEsR0FBRztJQUM5RSxNQUFNWCxTQUFTQyxhQUFhSixJQUFJRyxNQUFNLElBQUlXO0lBQzFDLE1BQU1oQixpQkFBaUJhLHFCQUNuQkEsbUJBQW1CSSxPQUFPLENBQUNDLElBQUksQ0FBQyxDQUFDLEVBQUVDLElBQUksRUFBRSxHQUFLZCxXQUFXYyxPQUFPbkIsaUJBQ2hFO0lBRUosSUFBSSxDQUFDUCxZQUFZO1FBQ2YsTUFBTSxJQUFJMkIsZ0JBQVEsQ0FDaEIsQ0FBQyx5QkFBeUIsRUFBRUMsT0FBTzNCLGdCQUFnQixrQ0FBa0MsQ0FBQztJQUUxRjtJQUVBUSxJQUFJb0IsVUFBVSxHQUFHcEIsSUFBSW9CLFVBQVUsSUFBSTtJQUNuQ3BCLElBQUlHLE1BQU0sR0FBR0E7SUFDYkgsSUFBSUYsY0FBYyxHQUNoQixPQUFPQyxzQkFBc0IsY0FBY0Esb0JBQW9CRCxrQkFBa0JnQjtJQUNuRmQsSUFBSVgsT0FBTyxHQUFHQTtJQUNkVyxJQUFJcUIsSUFBSSxHQUFHQyxJQUFBQSxjQUFRLEVBQUNqQyxRQUFRdUIsTUFBTSxDQUFDUyxJQUFJO0lBQ3ZDckIsSUFBSXVCLEtBQUssR0FBRztRQUNWdEIsTUFBT0EsUUFBUyxNQUFNdUIsSUFBQUEsc0JBQWEsRUFBQ3RCO0lBQ3RDO0lBRUEsSUFBSSxPQUFPTSxTQUFTLGFBQWFSLElBQUlRLElBQUksR0FBR0E7SUFFNUMsSUFBSSxDQUFDUixJQUFJeUIsQ0FBQyxFQUFFekIsSUFBSXlCLENBQUMsR0FBR3pCLElBQUlxQixJQUFJLENBQUNJLENBQUM7SUFDOUIsSUFBSSxDQUFDekIsSUFBSTBCLGlCQUFpQixFQUFFMUIsSUFBSTBCLGlCQUFpQixHQUFHQyxJQUFBQSx5QkFBYSxFQUFDM0I7SUFFbEUsT0FBTzRCLElBQUFBLGVBQU0sRUFBUTtRQUNuQnJDO1FBQ0FHO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FRO1FBQ0FDO1FBQ0FOO1FBQ0FPO0lBQ0Y7QUFDRiJ9