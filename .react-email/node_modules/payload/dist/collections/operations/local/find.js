"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return findLocal;
    }
});
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _dataloader = require("../../dataloader");
const _find = /*#__PURE__*/ _interop_require_default(require("../find"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findLocal(payload, options) {
    const { collection: collectionSlug, context, currentDepth, depth, disableErrors, draft = false, fallbackLocale: fallbackLocaleArg = options?.req?.fallbackLocale, limit, locale: localeArg = null, overrideAccess = true, page, pagination = true, req = {}, showHiddenFields, sort, user, where } = options;
    (0, _setRequestContext.setRequestContext)(req, context);
    const collection = payload.collections[collectionSlug];
    const localizationConfig = payload?.config?.localization;
    const defaultLocale = localizationConfig ? localizationConfig.defaultLocale : null;
    const locale = localeArg || req.locale || defaultLocale;
    const fallbackLocale = localizationConfig ? localizationConfig.locales.find(({ code })=>locale === code)?.fallbackLocale : null;
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Find Operation.`);
    }
    req.payloadAPI = req.payloadAPI || 'local';
    req.locale = locale;
    req.fallbackLocale = typeof fallbackLocaleArg !== 'undefined' ? fallbackLocaleArg : fallbackLocale || defaultLocale;
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    req.payload = payload;
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    if (typeof user !== 'undefined') req.user = user;
    return (0, _find.default)({
        collection,
        currentDepth,
        depth,
        disableErrors,
        draft,
        limit,
        overrideAccess,
        page,
        pagination,
        req,
        showHiddenFields,
        sort,
        where
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL2xvY2FsL2ZpbmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBHZW5lcmF0ZWRUeXBlcyB9IGZyb20gJy4uLy4uLy4uLydcbmltcG9ydCB0eXBlIHsgUGFnaW5hdGVkRG9jcyB9IGZyb20gJy4uLy4uLy4uL2RhdGFiYXNlL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCwgUmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkIH0gZnJvbSAnLi4vLi4vLi4vcGF5bG9hZCdcbmltcG9ydCB0eXBlIHsgRG9jdW1lbnQsIFdoZXJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5cbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJ1xuaW1wb3J0IHsgc2V0UmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3NldFJlcXVlc3RDb250ZXh0J1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbnMvaW5pdCdcbmltcG9ydCB7IGdldERhdGFMb2FkZXIgfSBmcm9tICcuLi8uLi9kYXRhbG9hZGVyJ1xuaW1wb3J0IGZpbmQgZnJvbSAnLi4vZmluZCdcblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+ID0ge1xuICBjb2xsZWN0aW9uOiBUXG4gIC8qKlxuICAgKiBjb250ZXh0LCB3aGljaCB3aWxsIHRoZW4gYmUgcGFzc2VkIHRvIHJlcS5jb250ZXh0LCB3aGljaCBjYW4gYmUgcmVhZCBieSBob29rc1xuICAgKi9cbiAgY29udGV4dD86IFJlcXVlc3RDb250ZXh0XG4gIGN1cnJlbnREZXB0aD86IG51bWJlclxuICBkZXB0aD86IG51bWJlclxuICBkaXNhYmxlRXJyb3JzPzogYm9vbGVhblxuICBkcmFmdD86IGJvb2xlYW5cbiAgZmFsbGJhY2tMb2NhbGU/OiBzdHJpbmdcbiAgbGltaXQ/OiBudW1iZXJcbiAgbG9jYWxlPzogc3RyaW5nXG4gIG92ZXJyaWRlQWNjZXNzPzogYm9vbGVhblxuICBwYWdlPzogbnVtYmVyXG4gIHBhZ2luYXRpb24/OiBib29sZWFuXG4gIHJlcT86IFBheWxvYWRSZXF1ZXN0XG4gIHNob3dIaWRkZW5GaWVsZHM/OiBib29sZWFuXG4gIHNvcnQ/OiBzdHJpbmdcbiAgdXNlcj86IERvY3VtZW50XG4gIHdoZXJlPzogV2hlcmVcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZmluZExvY2FsPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4oXG4gIHBheWxvYWQ6IFBheWxvYWQsXG4gIG9wdGlvbnM6IE9wdGlvbnM8VD4sXG4pOiBQcm9taXNlPFBhZ2luYXRlZERvY3M8R2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ11bVF0+PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uU2x1ZyxcbiAgICBjb250ZXh0LFxuICAgIGN1cnJlbnREZXB0aCxcbiAgICBkZXB0aCxcbiAgICBkaXNhYmxlRXJyb3JzLFxuICAgIGRyYWZ0ID0gZmFsc2UsXG4gICAgZmFsbGJhY2tMb2NhbGU6IGZhbGxiYWNrTG9jYWxlQXJnID0gb3B0aW9ucz8ucmVxPy5mYWxsYmFja0xvY2FsZSxcbiAgICBsaW1pdCxcbiAgICBsb2NhbGU6IGxvY2FsZUFyZyA9IG51bGwsXG4gICAgb3ZlcnJpZGVBY2Nlc3MgPSB0cnVlLFxuICAgIHBhZ2UsXG4gICAgcGFnaW5hdGlvbiA9IHRydWUsXG4gICAgcmVxID0ge30gYXMgUGF5bG9hZFJlcXVlc3QsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICBzb3J0LFxuICAgIHVzZXIsXG4gICAgd2hlcmUsXG4gIH0gPSBvcHRpb25zXG4gIHNldFJlcXVlc3RDb250ZXh0KHJlcSwgY29udGV4dClcblxuICBjb25zdCBjb2xsZWN0aW9uID0gcGF5bG9hZC5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uU2x1Z11cbiAgY29uc3QgbG9jYWxpemF0aW9uQ29uZmlnID0gcGF5bG9hZD8uY29uZmlnPy5sb2NhbGl6YXRpb25cbiAgY29uc3QgZGVmYXVsdExvY2FsZSA9IGxvY2FsaXphdGlvbkNvbmZpZyA/IGxvY2FsaXphdGlvbkNvbmZpZy5kZWZhdWx0TG9jYWxlIDogbnVsbFxuICBjb25zdCBsb2NhbGUgPSBsb2NhbGVBcmcgfHwgcmVxLmxvY2FsZSB8fCBkZWZhdWx0TG9jYWxlXG4gIGNvbnN0IGZhbGxiYWNrTG9jYWxlID0gbG9jYWxpemF0aW9uQ29uZmlnXG4gICAgPyBsb2NhbGl6YXRpb25Db25maWcubG9jYWxlcy5maW5kKCh7IGNvZGUgfSkgPT4gbG9jYWxlID09PSBjb2RlKT8uZmFsbGJhY2tMb2NhbGVcbiAgICA6IG51bGxcblxuICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoXG4gICAgICBgVGhlIGNvbGxlY3Rpb24gd2l0aCBzbHVnICR7U3RyaW5nKGNvbGxlY3Rpb25TbHVnKX0gY2FuJ3QgYmUgZm91bmQuIEZpbmQgT3BlcmF0aW9uLmAsXG4gICAgKVxuICB9XG5cbiAgcmVxLnBheWxvYWRBUEkgPSByZXEucGF5bG9hZEFQSSB8fCAnbG9jYWwnXG4gIHJlcS5sb2NhbGUgPSBsb2NhbGVcbiAgcmVxLmZhbGxiYWNrTG9jYWxlID1cbiAgICB0eXBlb2YgZmFsbGJhY2tMb2NhbGVBcmcgIT09ICd1bmRlZmluZWQnID8gZmFsbGJhY2tMb2NhbGVBcmcgOiBmYWxsYmFja0xvY2FsZSB8fCBkZWZhdWx0TG9jYWxlXG4gIHJlcS5pMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcbiAgcmVxLnBheWxvYWQgPSBwYXlsb2FkXG5cbiAgaWYgKCFyZXEudCkgcmVxLnQgPSByZXEuaTE4bi50XG4gIGlmICghcmVxLnBheWxvYWREYXRhTG9hZGVyKSByZXEucGF5bG9hZERhdGFMb2FkZXIgPSBnZXREYXRhTG9hZGVyKHJlcSlcblxuICBpZiAodHlwZW9mIHVzZXIgIT09ICd1bmRlZmluZWQnKSByZXEudXNlciA9IHVzZXJcblxuICByZXR1cm4gZmluZDxHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXVtUXT4oe1xuICAgIGNvbGxlY3Rpb24sXG4gICAgY3VycmVudERlcHRoLFxuICAgIGRlcHRoLFxuICAgIGRpc2FibGVFcnJvcnMsXG4gICAgZHJhZnQsXG4gICAgbGltaXQsXG4gICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgcGFnZSxcbiAgICBwYWdpbmF0aW9uLFxuICAgIHJlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgIHNvcnQsXG4gICAgd2hlcmUsXG4gIH0pXG59XG4iXSwibmFtZXMiOlsiZmluZExvY2FsIiwicGF5bG9hZCIsIm9wdGlvbnMiLCJjb2xsZWN0aW9uIiwiY29sbGVjdGlvblNsdWciLCJjb250ZXh0IiwiY3VycmVudERlcHRoIiwiZGVwdGgiLCJkaXNhYmxlRXJyb3JzIiwiZHJhZnQiLCJmYWxsYmFja0xvY2FsZSIsImZhbGxiYWNrTG9jYWxlQXJnIiwicmVxIiwibGltaXQiLCJsb2NhbGUiLCJsb2NhbGVBcmciLCJvdmVycmlkZUFjY2VzcyIsInBhZ2UiLCJwYWdpbmF0aW9uIiwic2hvd0hpZGRlbkZpZWxkcyIsInNvcnQiLCJ1c2VyIiwid2hlcmUiLCJzZXRSZXF1ZXN0Q29udGV4dCIsImNvbGxlY3Rpb25zIiwibG9jYWxpemF0aW9uQ29uZmlnIiwiY29uZmlnIiwibG9jYWxpemF0aW9uIiwiZGVmYXVsdExvY2FsZSIsImxvY2FsZXMiLCJmaW5kIiwiY29kZSIsIkFQSUVycm9yIiwiU3RyaW5nIiwicGF5bG9hZEFQSSIsImkxOG4iLCJpMThuSW5pdCIsInQiLCJwYXlsb2FkRGF0YUxvYWRlciIsImdldERhdGFMb2FkZXIiXSwibWFwcGluZ3MiOiI7Ozs7K0JBbUNBOzs7ZUFBOEJBOzs7d0JBN0JMO21DQUNTO3NCQUNUOzRCQUNLOzZEQUNiOzs7Ozs7QUF5QkYsZUFBZUEsVUFDNUJDLE9BQWdCLEVBQ2hCQyxPQUFtQjtJQUVuQixNQUFNLEVBQ0pDLFlBQVlDLGNBQWMsRUFDMUJDLE9BQU8sRUFDUEMsWUFBWSxFQUNaQyxLQUFLLEVBQ0xDLGFBQWEsRUFDYkMsUUFBUSxLQUFLLEVBQ2JDLGdCQUFnQkMsb0JBQW9CVCxTQUFTVSxLQUFLRixjQUFjLEVBQ2hFRyxLQUFLLEVBQ0xDLFFBQVFDLFlBQVksSUFBSSxFQUN4QkMsaUJBQWlCLElBQUksRUFDckJDLElBQUksRUFDSkMsYUFBYSxJQUFJLEVBQ2pCTixNQUFNLENBQUMsQ0FBbUIsRUFDMUJPLGdCQUFnQixFQUNoQkMsSUFBSSxFQUNKQyxJQUFJLEVBQ0pDLEtBQUssRUFDTixHQUFHcEI7SUFDSnFCLElBQUFBLG9DQUFpQixFQUFDWCxLQUFLUDtJQUV2QixNQUFNRixhQUFhRixRQUFRdUIsV0FBVyxDQUFDcEIsZUFBZTtJQUN0RCxNQUFNcUIscUJBQXFCeEIsU0FBU3lCLFFBQVFDO0lBQzVDLE1BQU1DLGdCQUFnQkgscUJBQXFCQSxtQkFBbUJHLGFBQWEsR0FBRztJQUM5RSxNQUFNZCxTQUFTQyxhQUFhSCxJQUFJRSxNQUFNLElBQUljO0lBQzFDLE1BQU1sQixpQkFBaUJlLHFCQUNuQkEsbUJBQW1CSSxPQUFPLENBQUNDLElBQUksQ0FBQyxDQUFDLEVBQUVDLElBQUksRUFBRSxHQUFLakIsV0FBV2lCLE9BQU9yQixpQkFDaEU7SUFFSixJQUFJLENBQUNQLFlBQVk7UUFDZixNQUFNLElBQUk2QixnQkFBUSxDQUNoQixDQUFDLHlCQUF5QixFQUFFQyxPQUFPN0IsZ0JBQWdCLGdDQUFnQyxDQUFDO0lBRXhGO0lBRUFRLElBQUlzQixVQUFVLEdBQUd0QixJQUFJc0IsVUFBVSxJQUFJO0lBQ25DdEIsSUFBSUUsTUFBTSxHQUFHQTtJQUNiRixJQUFJRixjQUFjLEdBQ2hCLE9BQU9DLHNCQUFzQixjQUFjQSxvQkFBb0JELGtCQUFrQmtCO0lBQ25GaEIsSUFBSXVCLElBQUksR0FBR0MsSUFBQUEsY0FBUSxFQUFDbkMsUUFBUXlCLE1BQU0sQ0FBQ1MsSUFBSTtJQUN2Q3ZCLElBQUlYLE9BQU8sR0FBR0E7SUFFZCxJQUFJLENBQUNXLElBQUl5QixDQUFDLEVBQUV6QixJQUFJeUIsQ0FBQyxHQUFHekIsSUFBSXVCLElBQUksQ0FBQ0UsQ0FBQztJQUM5QixJQUFJLENBQUN6QixJQUFJMEIsaUJBQWlCLEVBQUUxQixJQUFJMEIsaUJBQWlCLEdBQUdDLElBQUFBLHlCQUFhLEVBQUMzQjtJQUVsRSxJQUFJLE9BQU9TLFNBQVMsYUFBYVQsSUFBSVMsSUFBSSxHQUFHQTtJQUU1QyxPQUFPUyxJQUFBQSxhQUFJLEVBQW1DO1FBQzVDM0I7UUFDQUc7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUk7UUFDQUc7UUFDQUM7UUFDQUM7UUFDQU47UUFDQU87UUFDQUM7UUFDQUU7SUFDRjtBQUNGIn0=