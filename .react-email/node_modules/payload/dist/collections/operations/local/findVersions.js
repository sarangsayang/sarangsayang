"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return findVersionsLocal;
    }
});
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _dataloader = require("../../dataloader");
const _findVersions = /*#__PURE__*/ _interop_require_default(require("../findVersions"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findVersionsLocal(payload, options) {
    const { collection: collectionSlug, context, depth, fallbackLocale: fallbackLocaleArg = options?.req?.fallbackLocale, limit, locale: localeArg = null, overrideAccess = true, page, req: incomingReq, showHiddenFields, sort, user, where } = options;
    const collection = payload.collections[collectionSlug];
    const localizationConfig = payload?.config?.localization;
    const defaultLocale = localizationConfig ? localizationConfig.defaultLocale : null;
    const locale = localeArg || incomingReq?.locale || defaultLocale;
    const fallbackLocale = localizationConfig ? localizationConfig.locales.find(({ code })=>locale === code)?.fallbackLocale : null;
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Find Versions Operation.`);
    }
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    const req = {
        fallbackLocale: typeof fallbackLocaleArg !== 'undefined' ? fallbackLocaleArg : fallbackLocale || defaultLocale,
        i18n,
        locale,
        payload,
        payloadAPI: 'local',
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req, context);
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _findVersions.default)({
        collection,
        depth,
        limit,
        overrideAccess,
        page,
        req,
        showHiddenFields,
        sort,
        where
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL2xvY2FsL2ZpbmRWZXJzaW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEdlbmVyYXRlZFR5cGVzIH0gZnJvbSAnLi4vLi4vLi4vJ1xuaW1wb3J0IHR5cGUgeyBQYWdpbmF0ZWREb2NzIH0gZnJvbSAnLi4vLi4vLi4vZGF0YWJhc2UvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0LCBSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3MvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWQgfSBmcm9tICcuLi8uLi8uLi9wYXlsb2FkJ1xuaW1wb3J0IHR5cGUgeyBEb2N1bWVudCwgV2hlcmUgfSBmcm9tICcuLi8uLi8uLi90eXBlcydcbmltcG9ydCB0eXBlIHsgVHlwZVdpdGhWZXJzaW9uIH0gZnJvbSAnLi4vLi4vLi4vdmVyc2lvbnMvdHlwZXMnXG5cbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJ1xuaW1wb3J0IHsgc2V0UmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3NldFJlcXVlc3RDb250ZXh0J1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbnMvaW5pdCdcbmltcG9ydCB7IGdldERhdGFMb2FkZXIgfSBmcm9tICcuLi8uLi9kYXRhbG9hZGVyJ1xuaW1wb3J0IGZpbmRWZXJzaW9ucyBmcm9tICcuLi9maW5kVmVyc2lvbnMnXG5cbmV4cG9ydCB0eXBlIE9wdGlvbnM8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPiA9IHtcbiAgY29sbGVjdGlvbjogVFxuICAvKipcbiAgICogY29udGV4dCwgd2hpY2ggd2lsbCB0aGVuIGJlIHBhc3NlZCB0byByZXEuY29udGV4dCwgd2hpY2ggY2FuIGJlIHJlYWQgYnkgaG9va3NcbiAgICovXG4gIGNvbnRleHQ/OiBSZXF1ZXN0Q29udGV4dFxuICBkZXB0aD86IG51bWJlclxuICBkcmFmdD86IGJvb2xlYW5cbiAgZmFsbGJhY2tMb2NhbGU/OiBzdHJpbmdcbiAgbGltaXQ/OiBudW1iZXJcbiAgbG9jYWxlPzogc3RyaW5nXG4gIG92ZXJyaWRlQWNjZXNzPzogYm9vbGVhblxuICBwYWdlPzogbnVtYmVyXG4gIHJlcT86IFBheWxvYWRSZXF1ZXN0XG4gIHNob3dIaWRkZW5GaWVsZHM/OiBib29sZWFuXG4gIHNvcnQ/OiBzdHJpbmdcbiAgdXNlcj86IERvY3VtZW50XG4gIHdoZXJlPzogV2hlcmVcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZmluZFZlcnNpb25zTG9jYWw8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogT3B0aW9uczxUPixcbik6IFByb21pc2U8UGFnaW5hdGVkRG9jczxUeXBlV2l0aFZlcnNpb248R2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ11bVF0+Pj4ge1xuICBjb25zdCB7XG4gICAgY29sbGVjdGlvbjogY29sbGVjdGlvblNsdWcsXG4gICAgY29udGV4dCxcbiAgICBkZXB0aCxcbiAgICBmYWxsYmFja0xvY2FsZTogZmFsbGJhY2tMb2NhbGVBcmcgPSBvcHRpb25zPy5yZXE/LmZhbGxiYWNrTG9jYWxlLFxuICAgIGxpbWl0LFxuICAgIGxvY2FsZTogbG9jYWxlQXJnID0gbnVsbCxcbiAgICBvdmVycmlkZUFjY2VzcyA9IHRydWUsXG4gICAgcGFnZSxcbiAgICByZXE6IGluY29taW5nUmVxLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgc29ydCxcbiAgICB1c2VyLFxuICAgIHdoZXJlLFxuICB9ID0gb3B0aW9uc1xuXG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBwYXlsb2FkLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25TbHVnXVxuICBjb25zdCBsb2NhbGl6YXRpb25Db25maWcgPSBwYXlsb2FkPy5jb25maWc/LmxvY2FsaXphdGlvblxuICBjb25zdCBkZWZhdWx0TG9jYWxlID0gbG9jYWxpemF0aW9uQ29uZmlnID8gbG9jYWxpemF0aW9uQ29uZmlnLmRlZmF1bHRMb2NhbGUgOiBudWxsXG4gIGNvbnN0IGxvY2FsZSA9IGxvY2FsZUFyZyB8fCBpbmNvbWluZ1JlcT8ubG9jYWxlIHx8IGRlZmF1bHRMb2NhbGVcbiAgY29uc3QgZmFsbGJhY2tMb2NhbGUgPSBsb2NhbGl6YXRpb25Db25maWdcbiAgICA/IGxvY2FsaXphdGlvbkNvbmZpZy5sb2NhbGVzLmZpbmQoKHsgY29kZSB9KSA9PiBsb2NhbGUgPT09IGNvZGUpPy5mYWxsYmFja0xvY2FsZVxuICAgIDogbnVsbFxuXG4gIGlmICghY29sbGVjdGlvbikge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihcbiAgICAgIGBUaGUgY29sbGVjdGlvbiB3aXRoIHNsdWcgJHtTdHJpbmcoY29sbGVjdGlvblNsdWcpfSBjYW4ndCBiZSBmb3VuZC4gRmluZCBWZXJzaW9ucyBPcGVyYXRpb24uYCxcbiAgICApXG4gIH1cblxuICBjb25zdCBpMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcbiAgY29uc3QgcmVxID0ge1xuICAgIGZhbGxiYWNrTG9jYWxlOlxuICAgICAgdHlwZW9mIGZhbGxiYWNrTG9jYWxlQXJnICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGZhbGxiYWNrTG9jYWxlQXJnXG4gICAgICAgIDogZmFsbGJhY2tMb2NhbGUgfHwgZGVmYXVsdExvY2FsZSxcbiAgICBpMThuLFxuICAgIGxvY2FsZSxcbiAgICBwYXlsb2FkLFxuICAgIHBheWxvYWRBUEk6ICdsb2NhbCcsXG4gICAgdHJhbnNhY3Rpb25JRDogaW5jb21pbmdSZXE/LnRyYW5zYWN0aW9uSUQsXG4gICAgdXNlcixcbiAgfSBhcyBQYXlsb2FkUmVxdWVzdFxuICBzZXRSZXF1ZXN0Q29udGV4dChyZXEsIGNvbnRleHQpXG5cbiAgaWYgKCFyZXEudCkgcmVxLnQgPSByZXEuaTE4bi50XG4gIGlmICghcmVxLnBheWxvYWREYXRhTG9hZGVyKSByZXEucGF5bG9hZERhdGFMb2FkZXIgPSBnZXREYXRhTG9hZGVyKHJlcSlcblxuICByZXR1cm4gZmluZFZlcnNpb25zKHtcbiAgICBjb2xsZWN0aW9uLFxuICAgIGRlcHRoLFxuICAgIGxpbWl0LFxuICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgIHBhZ2UsXG4gICAgcmVxLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgc29ydCxcbiAgICB3aGVyZSxcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJmaW5kVmVyc2lvbnNMb2NhbCIsInBheWxvYWQiLCJvcHRpb25zIiwiY29sbGVjdGlvbiIsImNvbGxlY3Rpb25TbHVnIiwiY29udGV4dCIsImRlcHRoIiwiZmFsbGJhY2tMb2NhbGUiLCJmYWxsYmFja0xvY2FsZUFyZyIsInJlcSIsImxpbWl0IiwibG9jYWxlIiwibG9jYWxlQXJnIiwib3ZlcnJpZGVBY2Nlc3MiLCJwYWdlIiwiaW5jb21pbmdSZXEiLCJzaG93SGlkZGVuRmllbGRzIiwic29ydCIsInVzZXIiLCJ3aGVyZSIsImNvbGxlY3Rpb25zIiwibG9jYWxpemF0aW9uQ29uZmlnIiwiY29uZmlnIiwibG9jYWxpemF0aW9uIiwiZGVmYXVsdExvY2FsZSIsImxvY2FsZXMiLCJmaW5kIiwiY29kZSIsIkFQSUVycm9yIiwiU3RyaW5nIiwiaTE4biIsImkxOG5Jbml0IiwicGF5bG9hZEFQSSIsInRyYW5zYWN0aW9uSUQiLCJzZXRSZXF1ZXN0Q29udGV4dCIsInQiLCJwYXlsb2FkRGF0YUxvYWRlciIsImdldERhdGFMb2FkZXIiLCJmaW5kVmVyc2lvbnMiXSwibWFwcGluZ3MiOiI7Ozs7K0JBaUNBOzs7ZUFBOEJBOzs7d0JBMUJMO21DQUNTO3NCQUNUOzRCQUNLO3FFQUNMOzs7Ozs7QUFzQlYsZUFBZUEsa0JBQzVCQyxPQUFnQixFQUNoQkMsT0FBbUI7SUFFbkIsTUFBTSxFQUNKQyxZQUFZQyxjQUFjLEVBQzFCQyxPQUFPLEVBQ1BDLEtBQUssRUFDTEMsZ0JBQWdCQyxvQkFBb0JOLFNBQVNPLEtBQUtGLGNBQWMsRUFDaEVHLEtBQUssRUFDTEMsUUFBUUMsWUFBWSxJQUFJLEVBQ3hCQyxpQkFBaUIsSUFBSSxFQUNyQkMsSUFBSSxFQUNKTCxLQUFLTSxXQUFXLEVBQ2hCQyxnQkFBZ0IsRUFDaEJDLElBQUksRUFDSkMsSUFBSSxFQUNKQyxLQUFLLEVBQ04sR0FBR2pCO0lBRUosTUFBTUMsYUFBYUYsUUFBUW1CLFdBQVcsQ0FBQ2hCLGVBQWU7SUFDdEQsTUFBTWlCLHFCQUFxQnBCLFNBQVNxQixRQUFRQztJQUM1QyxNQUFNQyxnQkFBZ0JILHFCQUFxQkEsbUJBQW1CRyxhQUFhLEdBQUc7SUFDOUUsTUFBTWIsU0FBU0MsYUFBYUcsYUFBYUosVUFBVWE7SUFDbkQsTUFBTWpCLGlCQUFpQmMscUJBQ25CQSxtQkFBbUJJLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLENBQUMsRUFBRUMsSUFBSSxFQUFFLEdBQUtoQixXQUFXZ0IsT0FBT3BCLGlCQUNoRTtJQUVKLElBQUksQ0FBQ0osWUFBWTtRQUNmLE1BQU0sSUFBSXlCLGdCQUFRLENBQ2hCLENBQUMseUJBQXlCLEVBQUVDLE9BQU96QixnQkFBZ0IseUNBQXlDLENBQUM7SUFFakc7SUFFQSxNQUFNMEIsT0FBT0MsSUFBQUEsY0FBUSxFQUFDOUIsUUFBUXFCLE1BQU0sQ0FBQ1EsSUFBSTtJQUN6QyxNQUFNckIsTUFBTTtRQUNWRixnQkFDRSxPQUFPQyxzQkFBc0IsY0FDekJBLG9CQUNBRCxrQkFBa0JpQjtRQUN4Qk07UUFDQW5CO1FBQ0FWO1FBQ0ErQixZQUFZO1FBQ1pDLGVBQWVsQixhQUFha0I7UUFDNUJmO0lBQ0Y7SUFDQWdCLElBQUFBLG9DQUFpQixFQUFDekIsS0FBS0o7SUFFdkIsSUFBSSxDQUFDSSxJQUFJMEIsQ0FBQyxFQUFFMUIsSUFBSTBCLENBQUMsR0FBRzFCLElBQUlxQixJQUFJLENBQUNLLENBQUM7SUFDOUIsSUFBSSxDQUFDMUIsSUFBSTJCLGlCQUFpQixFQUFFM0IsSUFBSTJCLGlCQUFpQixHQUFHQyxJQUFBQSx5QkFBYSxFQUFDNUI7SUFFbEUsT0FBTzZCLElBQUFBLHFCQUFZLEVBQUM7UUFDbEJuQztRQUNBRztRQUNBSTtRQUNBRztRQUNBQztRQUNBTDtRQUNBTztRQUNBQztRQUNBRTtJQUNGO0FBQ0YifQ==