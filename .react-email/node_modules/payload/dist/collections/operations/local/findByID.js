"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return findByIDLocal;
    }
});
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _dataloader = require("../../dataloader");
const _findByID = /*#__PURE__*/ _interop_require_default(require("../findByID"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findByIDLocal(payload, options) {
    const { id, collection: collectionSlug, context, currentDepth, depth, disableErrors = false, draft = false, fallbackLocale: fallbackLocaleArg = options?.req?.fallbackLocale, locale: localeArg = null, overrideAccess = true, req = {}, showHiddenFields, user } = options;
    (0, _setRequestContext.setRequestContext)(req, context);
    const collection = payload.collections[collectionSlug];
    const localizationConfig = payload?.config?.localization;
    const defaultLocale = localizationConfig ? localizationConfig.defaultLocale : null;
    const locale = localeArg || req.locale || defaultLocale;
    const fallbackLocale = localizationConfig ? localizationConfig.locales.find(({ code })=>locale === code)?.fallbackLocale : null;
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Find By ID Operation.`);
    }
    req.payloadAPI = req.payloadAPI || 'local';
    req.locale = locale;
    req.fallbackLocale = typeof fallbackLocaleArg !== 'undefined' ? fallbackLocaleArg : fallbackLocale || defaultLocale;
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    req.payload = payload;
    if (typeof user !== 'undefined') req.user = user;
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _findByID.default)({
        id,
        collection,
        currentDepth,
        depth,
        disableErrors,
        draft,
        overrideAccess,
        req,
        showHiddenFields
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL2xvY2FsL2ZpbmRCeUlELnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgR2VuZXJhdGVkVHlwZXMgfSBmcm9tICcuLi8uLi8uLi8nXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0LCBSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3MvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWQgfSBmcm9tICcuLi8uLi8uLi9wYXlsb2FkJ1xuaW1wb3J0IHR5cGUgeyBEb2N1bWVudCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuXG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycydcbmltcG9ydCB7IHNldFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy9zZXRSZXF1ZXN0Q29udGV4dCdcbmltcG9ydCB7IGkxOG5Jbml0IH0gZnJvbSAnLi4vLi4vLi4vdHJhbnNsYXRpb25zL2luaXQnXG5pbXBvcnQgeyBnZXREYXRhTG9hZGVyIH0gZnJvbSAnLi4vLi4vZGF0YWxvYWRlcidcbmltcG9ydCBmaW5kQnlJRCBmcm9tICcuLi9maW5kQnlJRCdcblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+ID0ge1xuICBjb2xsZWN0aW9uOiBUXG4gIC8qKlxuICAgKiBjb250ZXh0LCB3aGljaCB3aWxsIHRoZW4gYmUgcGFzc2VkIHRvIHJlcS5jb250ZXh0LCB3aGljaCBjYW4gYmUgcmVhZCBieSBob29rc1xuICAgKi9cbiAgY29udGV4dD86IFJlcXVlc3RDb250ZXh0XG4gIGN1cnJlbnREZXB0aD86IG51bWJlclxuICBkZXB0aD86IG51bWJlclxuICBkaXNhYmxlRXJyb3JzPzogYm9vbGVhblxuICBkcmFmdD86IGJvb2xlYW5cbiAgZmFsbGJhY2tMb2NhbGU/OiBzdHJpbmdcbiAgaWQ6IG51bWJlciB8IHN0cmluZ1xuICBsb2NhbGU/OiBzdHJpbmdcbiAgb3ZlcnJpZGVBY2Nlc3M/OiBib29sZWFuXG4gIHJlcT86IFBheWxvYWRSZXF1ZXN0XG4gIHNob3dIaWRkZW5GaWVsZHM/OiBib29sZWFuXG4gIHVzZXI/OiBEb2N1bWVudFxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBmaW5kQnlJRExvY2FsPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4oXG4gIHBheWxvYWQ6IFBheWxvYWQsXG4gIG9wdGlvbnM6IE9wdGlvbnM8VD4sXG4pOiBQcm9taXNlPEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddW1RdPiB7XG4gIGNvbnN0IHtcbiAgICBpZCxcbiAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uU2x1ZyxcbiAgICBjb250ZXh0LFxuICAgIGN1cnJlbnREZXB0aCxcbiAgICBkZXB0aCxcbiAgICBkaXNhYmxlRXJyb3JzID0gZmFsc2UsXG4gICAgZHJhZnQgPSBmYWxzZSxcbiAgICBmYWxsYmFja0xvY2FsZTogZmFsbGJhY2tMb2NhbGVBcmcgPSBvcHRpb25zPy5yZXE/LmZhbGxiYWNrTG9jYWxlLFxuICAgIGxvY2FsZTogbG9jYWxlQXJnID0gbnVsbCxcbiAgICBvdmVycmlkZUFjY2VzcyA9IHRydWUsXG4gICAgcmVxID0ge30gYXMgUGF5bG9hZFJlcXVlc3QsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICB1c2VyLFxuICB9ID0gb3B0aW9uc1xuICBzZXRSZXF1ZXN0Q29udGV4dChyZXEsIGNvbnRleHQpXG5cbiAgY29uc3QgY29sbGVjdGlvbiA9IHBheWxvYWQuY29sbGVjdGlvbnNbY29sbGVjdGlvblNsdWddXG4gIGNvbnN0IGxvY2FsaXphdGlvbkNvbmZpZyA9IHBheWxvYWQ/LmNvbmZpZz8ubG9jYWxpemF0aW9uXG4gIGNvbnN0IGRlZmF1bHRMb2NhbGUgPSBsb2NhbGl6YXRpb25Db25maWcgPyBsb2NhbGl6YXRpb25Db25maWcuZGVmYXVsdExvY2FsZSA6IG51bGxcbiAgY29uc3QgbG9jYWxlID0gbG9jYWxlQXJnIHx8IHJlcS5sb2NhbGUgfHwgZGVmYXVsdExvY2FsZVxuICBjb25zdCBmYWxsYmFja0xvY2FsZSA9IGxvY2FsaXphdGlvbkNvbmZpZ1xuICAgID8gbG9jYWxpemF0aW9uQ29uZmlnLmxvY2FsZXMuZmluZCgoeyBjb2RlIH0pID0+IGxvY2FsZSA9PT0gY29kZSk/LmZhbGxiYWNrTG9jYWxlXG4gICAgOiBudWxsXG5cbiAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEFQSUVycm9yKFxuICAgICAgYFRoZSBjb2xsZWN0aW9uIHdpdGggc2x1ZyAke1N0cmluZyhjb2xsZWN0aW9uU2x1Zyl9IGNhbid0IGJlIGZvdW5kLiBGaW5kIEJ5IElEIE9wZXJhdGlvbi5gLFxuICAgIClcbiAgfVxuXG4gIHJlcS5wYXlsb2FkQVBJID0gcmVxLnBheWxvYWRBUEkgfHwgJ2xvY2FsJ1xuICByZXEubG9jYWxlID0gbG9jYWxlXG4gIHJlcS5mYWxsYmFja0xvY2FsZSA9XG4gICAgdHlwZW9mIGZhbGxiYWNrTG9jYWxlQXJnICE9PSAndW5kZWZpbmVkJyA/IGZhbGxiYWNrTG9jYWxlQXJnIDogZmFsbGJhY2tMb2NhbGUgfHwgZGVmYXVsdExvY2FsZVxuICByZXEuaTE4biA9IGkxOG5Jbml0KHBheWxvYWQuY29uZmlnLmkxOG4pXG4gIHJlcS5wYXlsb2FkID0gcGF5bG9hZFxuXG4gIGlmICh0eXBlb2YgdXNlciAhPT0gJ3VuZGVmaW5lZCcpIHJlcS51c2VyID0gdXNlclxuXG4gIGlmICghcmVxLnQpIHJlcS50ID0gcmVxLmkxOG4udFxuICBpZiAoIXJlcS5wYXlsb2FkRGF0YUxvYWRlcikgcmVxLnBheWxvYWREYXRhTG9hZGVyID0gZ2V0RGF0YUxvYWRlcihyZXEpXG5cbiAgcmV0dXJuIGZpbmRCeUlEPEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddW1RdPih7XG4gICAgaWQsXG4gICAgY29sbGVjdGlvbixcbiAgICBjdXJyZW50RGVwdGgsXG4gICAgZGVwdGgsXG4gICAgZGlzYWJsZUVycm9ycyxcbiAgICBkcmFmdCxcbiAgICBvdmVycmlkZUFjY2VzcyxcbiAgICByZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJmaW5kQnlJRExvY2FsIiwicGF5bG9hZCIsIm9wdGlvbnMiLCJpZCIsImNvbGxlY3Rpb24iLCJjb2xsZWN0aW9uU2x1ZyIsImNvbnRleHQiLCJjdXJyZW50RGVwdGgiLCJkZXB0aCIsImRpc2FibGVFcnJvcnMiLCJkcmFmdCIsImZhbGxiYWNrTG9jYWxlIiwiZmFsbGJhY2tMb2NhbGVBcmciLCJyZXEiLCJsb2NhbGUiLCJsb2NhbGVBcmciLCJvdmVycmlkZUFjY2VzcyIsInNob3dIaWRkZW5GaWVsZHMiLCJ1c2VyIiwic2V0UmVxdWVzdENvbnRleHQiLCJjb2xsZWN0aW9ucyIsImxvY2FsaXphdGlvbkNvbmZpZyIsImNvbmZpZyIsImxvY2FsaXphdGlvbiIsImRlZmF1bHRMb2NhbGUiLCJsb2NhbGVzIiwiZmluZCIsImNvZGUiLCJBUElFcnJvciIsIlN0cmluZyIsInBheWxvYWRBUEkiLCJpMThuIiwiaTE4bkluaXQiLCJ0IiwicGF5bG9hZERhdGFMb2FkZXIiLCJnZXREYXRhTG9hZGVyIiwiZmluZEJ5SUQiXSwibWFwcGluZ3MiOiI7Ozs7K0JBOEJBOzs7ZUFBOEJBOzs7d0JBekJMO21DQUNTO3NCQUNUOzRCQUNLO2lFQUNUOzs7Ozs7QUFxQk4sZUFBZUEsY0FDNUJDLE9BQWdCLEVBQ2hCQyxPQUFtQjtJQUVuQixNQUFNLEVBQ0pDLEVBQUUsRUFDRkMsWUFBWUMsY0FBYyxFQUMxQkMsT0FBTyxFQUNQQyxZQUFZLEVBQ1pDLEtBQUssRUFDTEMsZ0JBQWdCLEtBQUssRUFDckJDLFFBQVEsS0FBSyxFQUNiQyxnQkFBZ0JDLG9CQUFvQlYsU0FBU1csS0FBS0YsY0FBYyxFQUNoRUcsUUFBUUMsWUFBWSxJQUFJLEVBQ3hCQyxpQkFBaUIsSUFBSSxFQUNyQkgsTUFBTSxDQUFDLENBQW1CLEVBQzFCSSxnQkFBZ0IsRUFDaEJDLElBQUksRUFDTCxHQUFHaEI7SUFDSmlCLElBQUFBLG9DQUFpQixFQUFDTixLQUFLUDtJQUV2QixNQUFNRixhQUFhSCxRQUFRbUIsV0FBVyxDQUFDZixlQUFlO0lBQ3RELE1BQU1nQixxQkFBcUJwQixTQUFTcUIsUUFBUUM7SUFDNUMsTUFBTUMsZ0JBQWdCSCxxQkFBcUJBLG1CQUFtQkcsYUFBYSxHQUFHO0lBQzlFLE1BQU1WLFNBQVNDLGFBQWFGLElBQUlDLE1BQU0sSUFBSVU7SUFDMUMsTUFBTWIsaUJBQWlCVSxxQkFDbkJBLG1CQUFtQkksT0FBTyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxFQUFFQyxJQUFJLEVBQUUsR0FBS2IsV0FBV2EsT0FBT2hCLGlCQUNoRTtJQUVKLElBQUksQ0FBQ1AsWUFBWTtRQUNmLE1BQU0sSUFBSXdCLGdCQUFRLENBQ2hCLENBQUMseUJBQXlCLEVBQUVDLE9BQU94QixnQkFBZ0Isc0NBQXNDLENBQUM7SUFFOUY7SUFFQVEsSUFBSWlCLFVBQVUsR0FBR2pCLElBQUlpQixVQUFVLElBQUk7SUFDbkNqQixJQUFJQyxNQUFNLEdBQUdBO0lBQ2JELElBQUlGLGNBQWMsR0FDaEIsT0FBT0Msc0JBQXNCLGNBQWNBLG9CQUFvQkQsa0JBQWtCYTtJQUNuRlgsSUFBSWtCLElBQUksR0FBR0MsSUFBQUEsY0FBUSxFQUFDL0IsUUFBUXFCLE1BQU0sQ0FBQ1MsSUFBSTtJQUN2Q2xCLElBQUlaLE9BQU8sR0FBR0E7SUFFZCxJQUFJLE9BQU9pQixTQUFTLGFBQWFMLElBQUlLLElBQUksR0FBR0E7SUFFNUMsSUFBSSxDQUFDTCxJQUFJb0IsQ0FBQyxFQUFFcEIsSUFBSW9CLENBQUMsR0FBR3BCLElBQUlrQixJQUFJLENBQUNFLENBQUM7SUFDOUIsSUFBSSxDQUFDcEIsSUFBSXFCLGlCQUFpQixFQUFFckIsSUFBSXFCLGlCQUFpQixHQUFHQyxJQUFBQSx5QkFBYSxFQUFDdEI7SUFFbEUsT0FBT3VCLElBQUFBLGlCQUFRLEVBQW1DO1FBQ2hEakM7UUFDQUM7UUFDQUc7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQU07UUFDQUg7UUFDQUk7SUFDRjtBQUNGIn0=