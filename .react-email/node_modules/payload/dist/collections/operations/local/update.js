"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _getFileByPath = /*#__PURE__*/ _interop_require_default(require("../../../uploads/getFileByPath"));
const _dataloader = require("../../dataloader");
const _update = /*#__PURE__*/ _interop_require_default(require("../update"));
const _updateByID = /*#__PURE__*/ _interop_require_default(require("../updateByID"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function updateLocal(payload, options) {
    const { id, autosave, collection: collectionSlug, context, data, depth, draft, fallbackLocale: fallbackLocaleArg = options?.req?.fallbackLocale, file, filePath, locale: localeArg = null, overrideAccess = true, overwriteExistingFiles = false, req: incomingReq, showHiddenFields, user, where } = options;
    const collection = payload.collections[collectionSlug];
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    const localizationConfig = payload?.config?.localization;
    const defaultLocale = localizationConfig ? localizationConfig.defaultLocale : null;
    const locale = localeArg || incomingReq?.locale || defaultLocale;
    const fallbackLocale = localizationConfig ? localizationConfig.locales.find(({ code })=>locale === code)?.fallbackLocale : null;
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Update Operation.`);
    }
    const req = {
        fallbackLocale: typeof fallbackLocaleArg !== 'undefined' ? fallbackLocaleArg : fallbackLocale || defaultLocale,
        files: {
            file: file ?? await (0, _getFileByPath.default)(filePath)
        },
        i18n,
        locale: locale ?? defaultLocale,
        payload,
        payloadAPI: 'local',
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req, context);
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    const args = {
        id,
        autosave,
        collection,
        data,
        depth,
        draft,
        overrideAccess,
        overwriteExistingFiles,
        payload,
        req,
        showHiddenFields,
        where
    };
    if (options.id) {
        return (0, _updateByID.default)(args);
    }
    return (0, _update.default)(args);
}
const _default = updateLocal;

//# sourceMappingURL=data:application/json;base64,