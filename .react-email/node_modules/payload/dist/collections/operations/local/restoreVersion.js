"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return restoreVersionLocal;
    }
});
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _dataloader = require("../../dataloader");
const _restoreVersion = /*#__PURE__*/ _interop_require_default(require("../restoreVersion"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function restoreVersionLocal(payload, options) {
    const { id, collection: collectionSlug, context, depth, fallbackLocale: fallbackLocaleArg = options?.req?.fallbackLocale, locale: localeArg = null, overrideAccess = true, req: incomingReq, showHiddenFields, user } = options;
    const collection = payload.collections[collectionSlug];
    const localizationConfig = payload?.config?.localization;
    const defaultLocale = localizationConfig ? localizationConfig.defaultLocale : null;
    const locale = localeArg || incomingReq?.locale || defaultLocale;
    const fallbackLocale = localizationConfig ? localizationConfig.locales.find(({ code })=>locale === code)?.fallbackLocale : null;
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Restore Version Operation.`);
    }
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    const req = {
        fallbackLocale: typeof fallbackLocaleArg !== 'undefined' ? fallbackLocaleArg : fallbackLocale || defaultLocale,
        i18n,
        locale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req, context);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    const args = {
        id,
        collection,
        depth,
        overrideAccess,
        payload,
        req,
        showHiddenFields
    };
    return (0, _restoreVersion.default)(args);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL2xvY2FsL3Jlc3RvcmVWZXJzaW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgR2VuZXJhdGVkVHlwZXMgfSBmcm9tICcuLi8uLi8uLi8nXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0LCBSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3MvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWQgfSBmcm9tICcuLi8uLi8uLi9wYXlsb2FkJ1xuaW1wb3J0IHR5cGUgeyBEb2N1bWVudCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuXG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycydcbmltcG9ydCB7IHNldFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy9zZXRSZXF1ZXN0Q29udGV4dCdcbmltcG9ydCB7IGkxOG5Jbml0IH0gZnJvbSAnLi4vLi4vLi4vdHJhbnNsYXRpb25zL2luaXQnXG5pbXBvcnQgeyBnZXREYXRhTG9hZGVyIH0gZnJvbSAnLi4vLi4vZGF0YWxvYWRlcidcbmltcG9ydCByZXN0b3JlVmVyc2lvbiBmcm9tICcuLi9yZXN0b3JlVmVyc2lvbidcblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+ID0ge1xuICBjb2xsZWN0aW9uOiBUXG4gIC8qKlxuICAgKiBjb250ZXh0LCB3aGljaCB3aWxsIHRoZW4gYmUgcGFzc2VkIHRvIHJlcS5jb250ZXh0LCB3aGljaCBjYW4gYmUgcmVhZCBieSBob29rc1xuICAgKi9cbiAgY29udGV4dD86IFJlcXVlc3RDb250ZXh0XG4gIGRlcHRoPzogbnVtYmVyXG4gIGRyYWZ0PzogYm9vbGVhblxuICBmYWxsYmFja0xvY2FsZT86IHN0cmluZ1xuICBpZDogc3RyaW5nXG4gIGxvY2FsZT86IHN0cmluZ1xuICBvdmVycmlkZUFjY2Vzcz86IGJvb2xlYW5cbiAgcmVxPzogUGF5bG9hZFJlcXVlc3RcbiAgc2hvd0hpZGRlbkZpZWxkcz86IGJvb2xlYW5cbiAgdXNlcj86IERvY3VtZW50XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHJlc3RvcmVWZXJzaW9uTG9jYWw8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogT3B0aW9uczxUPixcbik6IFByb21pc2U8R2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ11bVF0+IHtcbiAgY29uc3Qge1xuICAgIGlkLFxuICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25TbHVnLFxuICAgIGNvbnRleHQsXG4gICAgZGVwdGgsXG4gICAgZmFsbGJhY2tMb2NhbGU6IGZhbGxiYWNrTG9jYWxlQXJnID0gb3B0aW9ucz8ucmVxPy5mYWxsYmFja0xvY2FsZSxcbiAgICBsb2NhbGU6IGxvY2FsZUFyZyA9IG51bGwsXG4gICAgb3ZlcnJpZGVBY2Nlc3MgPSB0cnVlLFxuICAgIHJlcTogaW5jb21pbmdSZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICB1c2VyLFxuICB9ID0gb3B0aW9uc1xuXG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBwYXlsb2FkLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25TbHVnXVxuICBjb25zdCBsb2NhbGl6YXRpb25Db25maWcgPSBwYXlsb2FkPy5jb25maWc/LmxvY2FsaXphdGlvblxuICBjb25zdCBkZWZhdWx0TG9jYWxlID0gbG9jYWxpemF0aW9uQ29uZmlnID8gbG9jYWxpemF0aW9uQ29uZmlnLmRlZmF1bHRMb2NhbGUgOiBudWxsXG4gIGNvbnN0IGxvY2FsZSA9IGxvY2FsZUFyZyB8fCBpbmNvbWluZ1JlcT8ubG9jYWxlIHx8IGRlZmF1bHRMb2NhbGVcbiAgY29uc3QgZmFsbGJhY2tMb2NhbGUgPSBsb2NhbGl6YXRpb25Db25maWdcbiAgICA/IGxvY2FsaXphdGlvbkNvbmZpZy5sb2NhbGVzLmZpbmQoKHsgY29kZSB9KSA9PiBsb2NhbGUgPT09IGNvZGUpPy5mYWxsYmFja0xvY2FsZVxuICAgIDogbnVsbFxuXG4gIGlmICghY29sbGVjdGlvbikge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihcbiAgICAgIGBUaGUgY29sbGVjdGlvbiB3aXRoIHNsdWcgJHtTdHJpbmcoXG4gICAgICAgIGNvbGxlY3Rpb25TbHVnLFxuICAgICAgKX0gY2FuJ3QgYmUgZm91bmQuIFJlc3RvcmUgVmVyc2lvbiBPcGVyYXRpb24uYCxcbiAgICApXG4gIH1cblxuICBjb25zdCBpMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcbiAgY29uc3QgcmVxID0ge1xuICAgIGZhbGxiYWNrTG9jYWxlOlxuICAgICAgdHlwZW9mIGZhbGxiYWNrTG9jYWxlQXJnICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGZhbGxiYWNrTG9jYWxlQXJnXG4gICAgICAgIDogZmFsbGJhY2tMb2NhbGUgfHwgZGVmYXVsdExvY2FsZSxcbiAgICBpMThuLFxuICAgIGxvY2FsZSxcbiAgICBwYXlsb2FkLFxuICAgIHBheWxvYWRBUEk6ICdsb2NhbCcsXG4gICAgdDogaTE4bi50LFxuICAgIHRyYW5zYWN0aW9uSUQ6IGluY29taW5nUmVxPy50cmFuc2FjdGlvbklELFxuICAgIHVzZXIsXG4gIH0gYXMgUGF5bG9hZFJlcXVlc3RcbiAgc2V0UmVxdWVzdENvbnRleHQocmVxLCBjb250ZXh0KVxuXG4gIGlmICghcmVxLnBheWxvYWREYXRhTG9hZGVyKSByZXEucGF5bG9hZERhdGFMb2FkZXIgPSBnZXREYXRhTG9hZGVyKHJlcSlcblxuICBjb25zdCBhcmdzID0ge1xuICAgIGlkLFxuICAgIGNvbGxlY3Rpb24sXG4gICAgZGVwdGgsXG4gICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgcGF5bG9hZCxcbiAgICByZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgfVxuXG4gIHJldHVybiByZXN0b3JlVmVyc2lvbihhcmdzKVxufVxuIl0sIm5hbWVzIjpbInJlc3RvcmVWZXJzaW9uTG9jYWwiLCJwYXlsb2FkIiwib3B0aW9ucyIsImlkIiwiY29sbGVjdGlvbiIsImNvbGxlY3Rpb25TbHVnIiwiY29udGV4dCIsImRlcHRoIiwiZmFsbGJhY2tMb2NhbGUiLCJmYWxsYmFja0xvY2FsZUFyZyIsInJlcSIsImxvY2FsZSIsImxvY2FsZUFyZyIsIm92ZXJyaWRlQWNjZXNzIiwiaW5jb21pbmdSZXEiLCJzaG93SGlkZGVuRmllbGRzIiwidXNlciIsImNvbGxlY3Rpb25zIiwibG9jYWxpemF0aW9uQ29uZmlnIiwiY29uZmlnIiwibG9jYWxpemF0aW9uIiwiZGVmYXVsdExvY2FsZSIsImxvY2FsZXMiLCJmaW5kIiwiY29kZSIsIkFQSUVycm9yIiwiU3RyaW5nIiwiaTE4biIsImkxOG5Jbml0IiwicGF5bG9hZEFQSSIsInQiLCJ0cmFuc2FjdGlvbklEIiwic2V0UmVxdWVzdENvbnRleHQiLCJwYXlsb2FkRGF0YUxvYWRlciIsImdldERhdGFMb2FkZXIiLCJhcmdzIiwicmVzdG9yZVZlcnNpb24iXSwibWFwcGluZ3MiOiI7Ozs7K0JBNEJBOzs7ZUFBOEJBOzs7d0JBdkJMO21DQUNTO3NCQUNUOzRCQUNLO3VFQUNIOzs7Ozs7QUFtQlosZUFBZUEsb0JBQzVCQyxPQUFnQixFQUNoQkMsT0FBbUI7SUFFbkIsTUFBTSxFQUNKQyxFQUFFLEVBQ0ZDLFlBQVlDLGNBQWMsRUFDMUJDLE9BQU8sRUFDUEMsS0FBSyxFQUNMQyxnQkFBZ0JDLG9CQUFvQlAsU0FBU1EsS0FBS0YsY0FBYyxFQUNoRUcsUUFBUUMsWUFBWSxJQUFJLEVBQ3hCQyxpQkFBaUIsSUFBSSxFQUNyQkgsS0FBS0ksV0FBVyxFQUNoQkMsZ0JBQWdCLEVBQ2hCQyxJQUFJLEVBQ0wsR0FBR2Q7SUFFSixNQUFNRSxhQUFhSCxRQUFRZ0IsV0FBVyxDQUFDWixlQUFlO0lBQ3RELE1BQU1hLHFCQUFxQmpCLFNBQVNrQixRQUFRQztJQUM1QyxNQUFNQyxnQkFBZ0JILHFCQUFxQkEsbUJBQW1CRyxhQUFhLEdBQUc7SUFDOUUsTUFBTVYsU0FBU0MsYUFBYUUsYUFBYUgsVUFBVVU7SUFDbkQsTUFBTWIsaUJBQWlCVSxxQkFDbkJBLG1CQUFtQkksT0FBTyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxFQUFFQyxJQUFJLEVBQUUsR0FBS2IsV0FBV2EsT0FBT2hCLGlCQUNoRTtJQUVKLElBQUksQ0FBQ0osWUFBWTtRQUNmLE1BQU0sSUFBSXFCLGdCQUFRLENBQ2hCLENBQUMseUJBQXlCLEVBQUVDLE9BQzFCckIsZ0JBQ0EsMkNBQTJDLENBQUM7SUFFbEQ7SUFFQSxNQUFNc0IsT0FBT0MsSUFBQUEsY0FBUSxFQUFDM0IsUUFBUWtCLE1BQU0sQ0FBQ1EsSUFBSTtJQUN6QyxNQUFNakIsTUFBTTtRQUNWRixnQkFDRSxPQUFPQyxzQkFBc0IsY0FDekJBLG9CQUNBRCxrQkFBa0JhO1FBQ3hCTTtRQUNBaEI7UUFDQVY7UUFDQTRCLFlBQVk7UUFDWkMsR0FBR0gsS0FBS0csQ0FBQztRQUNUQyxlQUFlakIsYUFBYWlCO1FBQzVCZjtJQUNGO0lBQ0FnQixJQUFBQSxvQ0FBaUIsRUFBQ3RCLEtBQUtKO0lBRXZCLElBQUksQ0FBQ0ksSUFBSXVCLGlCQUFpQixFQUFFdkIsSUFBSXVCLGlCQUFpQixHQUFHQyxJQUFBQSx5QkFBYSxFQUFDeEI7SUFFbEUsTUFBTXlCLE9BQU87UUFDWGhDO1FBQ0FDO1FBQ0FHO1FBQ0FNO1FBQ0FaO1FBQ0FTO1FBQ0FLO0lBQ0Y7SUFFQSxPQUFPcUIsSUFBQUEsdUJBQWMsRUFBQ0Q7QUFDeEIifQ==