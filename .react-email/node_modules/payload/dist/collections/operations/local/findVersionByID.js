"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return findVersionByIDLocal;
    }
});
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _dataloader = require("../../dataloader");
const _findVersionByID = /*#__PURE__*/ _interop_require_default(require("../findVersionByID"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findVersionByIDLocal(payload, options) {
    const { id, collection: collectionSlug, context, depth, disableErrors = false, fallbackLocale: fallbackLocaleArg = options?.req?.fallbackLocale, locale: localeArg = null, overrideAccess = true, req = {}, showHiddenFields } = options;
    (0, _setRequestContext.setRequestContext)(req, context);
    const collection = payload.collections[collectionSlug];
    const localizationConfig = payload?.config?.localization;
    const defaultLocale = localizationConfig ? localizationConfig.defaultLocale : null;
    const locale = localeArg || req.locale || defaultLocale;
    const fallbackLocale = localizationConfig ? localizationConfig.locales.find(({ code })=>locale === code)?.fallbackLocale : null;
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Find Version By ID Operation.`);
    }
    req.payloadAPI = req.payloadAPI || 'local';
    req.locale = locale;
    req.fallbackLocale = typeof fallbackLocaleArg !== 'undefined' ? fallbackLocaleArg : fallbackLocale || defaultLocale;
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    req.payload = payload;
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _findVersionByID.default)({
        id,
        collection,
        depth,
        disableErrors,
        overrideAccess,
        req,
        showHiddenFields
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL2xvY2FsL2ZpbmRWZXJzaW9uQnlJRC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEdlbmVyYXRlZFR5cGVzIH0gZnJvbSAnLi4vLi4vLi4vJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCwgUmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkIH0gZnJvbSAnLi4vLi4vLi4vcGF5bG9hZCdcbmltcG9ydCB0eXBlIHsgRG9jdW1lbnQgfSBmcm9tICcuLi8uLi8uLi90eXBlcydcbmltcG9ydCB0eXBlIHsgVHlwZVdpdGhWZXJzaW9uIH0gZnJvbSAnLi4vLi4vLi4vdmVyc2lvbnMvdHlwZXMnXG5cbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJ1xuaW1wb3J0IHsgc2V0UmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3NldFJlcXVlc3RDb250ZXh0J1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbnMvaW5pdCdcbmltcG9ydCB7IGdldERhdGFMb2FkZXIgfSBmcm9tICcuLi8uLi9kYXRhbG9hZGVyJ1xuaW1wb3J0IGZpbmRWZXJzaW9uQnlJRCBmcm9tICcuLi9maW5kVmVyc2lvbkJ5SUQnXG5cbmV4cG9ydCB0eXBlIE9wdGlvbnM8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPiA9IHtcbiAgY29sbGVjdGlvbjogVFxuICAvKipcbiAgICogY29udGV4dCwgd2hpY2ggd2lsbCB0aGVuIGJlIHBhc3NlZCB0byByZXEuY29udGV4dCwgd2hpY2ggY2FuIGJlIHJlYWQgYnkgaG9va3NcbiAgICovXG4gIGNvbnRleHQ/OiBSZXF1ZXN0Q29udGV4dFxuICBkZXB0aD86IG51bWJlclxuICBkaXNhYmxlRXJyb3JzPzogYm9vbGVhblxuICBkcmFmdD86IGJvb2xlYW5cbiAgZmFsbGJhY2tMb2NhbGU/OiBzdHJpbmdcbiAgaWQ6IHN0cmluZ1xuICBsb2NhbGU/OiBzdHJpbmdcbiAgb3ZlcnJpZGVBY2Nlc3M/OiBib29sZWFuXG4gIHJlcT86IFBheWxvYWRSZXF1ZXN0XG4gIHNob3dIaWRkZW5GaWVsZHM/OiBib29sZWFuXG4gIHVzZXI/OiBEb2N1bWVudFxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBmaW5kVmVyc2lvbkJ5SURMb2NhbDxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBPcHRpb25zPFQ+LFxuKTogUHJvbWlzZTxUeXBlV2l0aFZlcnNpb248R2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ11bVF0+PiB7XG4gIGNvbnN0IHtcbiAgICBpZCxcbiAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uU2x1ZyxcbiAgICBjb250ZXh0LFxuICAgIGRlcHRoLFxuICAgIGRpc2FibGVFcnJvcnMgPSBmYWxzZSxcbiAgICBmYWxsYmFja0xvY2FsZTogZmFsbGJhY2tMb2NhbGVBcmcgPSBvcHRpb25zPy5yZXE/LmZhbGxiYWNrTG9jYWxlLFxuICAgIGxvY2FsZTogbG9jYWxlQXJnID0gbnVsbCxcbiAgICBvdmVycmlkZUFjY2VzcyA9IHRydWUsXG4gICAgcmVxID0ge30gYXMgUGF5bG9hZFJlcXVlc3QsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgfSA9IG9wdGlvbnNcbiAgc2V0UmVxdWVzdENvbnRleHQocmVxLCBjb250ZXh0KVxuXG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBwYXlsb2FkLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25TbHVnXVxuICBjb25zdCBsb2NhbGl6YXRpb25Db25maWcgPSBwYXlsb2FkPy5jb25maWc/LmxvY2FsaXphdGlvblxuICBjb25zdCBkZWZhdWx0TG9jYWxlID0gbG9jYWxpemF0aW9uQ29uZmlnID8gbG9jYWxpemF0aW9uQ29uZmlnLmRlZmF1bHRMb2NhbGUgOiBudWxsXG4gIGNvbnN0IGxvY2FsZSA9IGxvY2FsZUFyZyB8fCByZXEubG9jYWxlIHx8IGRlZmF1bHRMb2NhbGVcbiAgY29uc3QgZmFsbGJhY2tMb2NhbGUgPSBsb2NhbGl6YXRpb25Db25maWdcbiAgICA/IGxvY2FsaXphdGlvbkNvbmZpZy5sb2NhbGVzLmZpbmQoKHsgY29kZSB9KSA9PiBsb2NhbGUgPT09IGNvZGUpPy5mYWxsYmFja0xvY2FsZVxuICAgIDogbnVsbFxuXG4gIGlmICghY29sbGVjdGlvbikge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihcbiAgICAgIGBUaGUgY29sbGVjdGlvbiB3aXRoIHNsdWcgJHtTdHJpbmcoXG4gICAgICAgIGNvbGxlY3Rpb25TbHVnLFxuICAgICAgKX0gY2FuJ3QgYmUgZm91bmQuIEZpbmQgVmVyc2lvbiBCeSBJRCBPcGVyYXRpb24uYCxcbiAgICApXG4gIH1cblxuICByZXEucGF5bG9hZEFQSSA9IHJlcS5wYXlsb2FkQVBJIHx8ICdsb2NhbCdcbiAgcmVxLmxvY2FsZSA9IGxvY2FsZVxuICByZXEuZmFsbGJhY2tMb2NhbGUgPVxuICAgIHR5cGVvZiBmYWxsYmFja0xvY2FsZUFyZyAhPT0gJ3VuZGVmaW5lZCcgPyBmYWxsYmFja0xvY2FsZUFyZyA6IGZhbGxiYWNrTG9jYWxlIHx8IGRlZmF1bHRMb2NhbGVcbiAgcmVxLmkxOG4gPSBpMThuSW5pdChwYXlsb2FkLmNvbmZpZy5pMThuKVxuICByZXEucGF5bG9hZCA9IHBheWxvYWRcblxuICBpZiAoIXJlcS50KSByZXEudCA9IHJlcS5pMThuLnRcbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIHJldHVybiBmaW5kVmVyc2lvbkJ5SUQoe1xuICAgIGlkLFxuICAgIGNvbGxlY3Rpb24sXG4gICAgZGVwdGgsXG4gICAgZGlzYWJsZUVycm9ycyxcbiAgICBvdmVycmlkZUFjY2VzcyxcbiAgICByZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJmaW5kVmVyc2lvbkJ5SURMb2NhbCIsInBheWxvYWQiLCJvcHRpb25zIiwiaWQiLCJjb2xsZWN0aW9uIiwiY29sbGVjdGlvblNsdWciLCJjb250ZXh0IiwiZGVwdGgiLCJkaXNhYmxlRXJyb3JzIiwiZmFsbGJhY2tMb2NhbGUiLCJmYWxsYmFja0xvY2FsZUFyZyIsInJlcSIsImxvY2FsZSIsImxvY2FsZUFyZyIsIm92ZXJyaWRlQWNjZXNzIiwic2hvd0hpZGRlbkZpZWxkcyIsInNldFJlcXVlc3RDb250ZXh0IiwiY29sbGVjdGlvbnMiLCJsb2NhbGl6YXRpb25Db25maWciLCJjb25maWciLCJsb2NhbGl6YXRpb24iLCJkZWZhdWx0TG9jYWxlIiwibG9jYWxlcyIsImZpbmQiLCJjb2RlIiwiQVBJRXJyb3IiLCJTdHJpbmciLCJwYXlsb2FkQVBJIiwiaTE4biIsImkxOG5Jbml0IiwidCIsInBheWxvYWREYXRhTG9hZGVyIiwiZ2V0RGF0YUxvYWRlciIsImZpbmRWZXJzaW9uQnlJRCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkE4QkE7OztlQUE4QkE7Ozt3QkF4Qkw7bUNBQ1M7c0JBQ1Q7NEJBQ0s7d0VBQ0Y7Ozs7OztBQW9CYixlQUFlQSxxQkFDNUJDLE9BQWdCLEVBQ2hCQyxPQUFtQjtJQUVuQixNQUFNLEVBQ0pDLEVBQUUsRUFDRkMsWUFBWUMsY0FBYyxFQUMxQkMsT0FBTyxFQUNQQyxLQUFLLEVBQ0xDLGdCQUFnQixLQUFLLEVBQ3JCQyxnQkFBZ0JDLG9CQUFvQlIsU0FBU1MsS0FBS0YsY0FBYyxFQUNoRUcsUUFBUUMsWUFBWSxJQUFJLEVBQ3hCQyxpQkFBaUIsSUFBSSxFQUNyQkgsTUFBTSxDQUFDLENBQW1CLEVBQzFCSSxnQkFBZ0IsRUFDakIsR0FBR2I7SUFDSmMsSUFBQUEsb0NBQWlCLEVBQUNMLEtBQUtMO0lBRXZCLE1BQU1GLGFBQWFILFFBQVFnQixXQUFXLENBQUNaLGVBQWU7SUFDdEQsTUFBTWEscUJBQXFCakIsU0FBU2tCLFFBQVFDO0lBQzVDLE1BQU1DLGdCQUFnQkgscUJBQXFCQSxtQkFBbUJHLGFBQWEsR0FBRztJQUM5RSxNQUFNVCxTQUFTQyxhQUFhRixJQUFJQyxNQUFNLElBQUlTO0lBQzFDLE1BQU1aLGlCQUFpQlMscUJBQ25CQSxtQkFBbUJJLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLENBQUMsRUFBRUMsSUFBSSxFQUFFLEdBQUtaLFdBQVdZLE9BQU9mLGlCQUNoRTtJQUVKLElBQUksQ0FBQ0wsWUFBWTtRQUNmLE1BQU0sSUFBSXFCLGdCQUFRLENBQ2hCLENBQUMseUJBQXlCLEVBQUVDLE9BQzFCckIsZ0JBQ0EsOENBQThDLENBQUM7SUFFckQ7SUFFQU0sSUFBSWdCLFVBQVUsR0FBR2hCLElBQUlnQixVQUFVLElBQUk7SUFDbkNoQixJQUFJQyxNQUFNLEdBQUdBO0lBQ2JELElBQUlGLGNBQWMsR0FDaEIsT0FBT0Msc0JBQXNCLGNBQWNBLG9CQUFvQkQsa0JBQWtCWTtJQUNuRlYsSUFBSWlCLElBQUksR0FBR0MsSUFBQUEsY0FBUSxFQUFDNUIsUUFBUWtCLE1BQU0sQ0FBQ1MsSUFBSTtJQUN2Q2pCLElBQUlWLE9BQU8sR0FBR0E7SUFFZCxJQUFJLENBQUNVLElBQUltQixDQUFDLEVBQUVuQixJQUFJbUIsQ0FBQyxHQUFHbkIsSUFBSWlCLElBQUksQ0FBQ0UsQ0FBQztJQUM5QixJQUFJLENBQUNuQixJQUFJb0IsaUJBQWlCLEVBQUVwQixJQUFJb0IsaUJBQWlCLEdBQUdDLElBQUFBLHlCQUFhLEVBQUNyQjtJQUVsRSxPQUFPc0IsSUFBQUEsd0JBQWUsRUFBQztRQUNyQjlCO1FBQ0FDO1FBQ0FHO1FBQ0FDO1FBQ0FNO1FBQ0FIO1FBQ0FJO0lBQ0Y7QUFDRiJ9