"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    buildEntityPolicy: function() {
        return buildEntityPolicy;
    },
    buildPolicyType: function() {
        return buildPolicyType;
    },
    default: function() {
        return buildPoliciesType;
    }
});
const _graphql = require("graphql");
const _graphqltypejson = require("graphql-type-json");
const _formatLabels = require("../../utilities/formatLabels");
const _formatName = /*#__PURE__*/ _interop_require_default(require("../utilities/formatName"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const buildFields = (label, fieldsToBuild)=>fieldsToBuild.reduce((builtFields, field)=>{
        const includeField = !field.hidden && field.type !== 'ui';
        if (includeField) {
            if (field.name) {
                const fieldName = (0, _formatName.default)(field.name);
                const objectTypeFields = [
                    'create',
                    'read',
                    'update',
                    'delete'
                ].reduce((operations, operation)=>{
                    const capitalizedOperation = operation.charAt(0).toUpperCase() + operation.slice(1);
                    return {
                        ...operations,
                        [operation]: {
                            type: new _graphql.GraphQLObjectType({
                                name: `${label}_${fieldName}_${capitalizedOperation}`,
                                fields: {
                                    permission: {
                                        type: new _graphql.GraphQLNonNull(_graphql.GraphQLBoolean)
                                    }
                                }
                            })
                        }
                    };
                }, {});
                if (field.fields) {
                    objectTypeFields.fields = {
                        type: new _graphql.GraphQLObjectType({
                            name: `${label}_${fieldName}_Fields`,
                            fields: buildFields(`${label}_${fieldName}`, field.fields)
                        })
                    };
                }
                return {
                    ...builtFields,
                    [field.name]: {
                        type: new _graphql.GraphQLObjectType({
                            name: `${label}_${fieldName}`,
                            fields: objectTypeFields
                        })
                    }
                };
            }
            if (!field.name && field.fields) {
                const subFields = buildFields(label, field.fields);
                return {
                    ...builtFields,
                    ...subFields
                };
            }
            if (field.type === 'tabs') {
                return field.tabs.reduce((fieldsWithTabFields, tab)=>{
                    return {
                        ...fieldsWithTabFields,
                        ...buildFields(label, tab.fields)
                    };
                }, {
                    ...builtFields
                });
            }
        }
        return builtFields;
    }, {});
const buildEntityPolicy = (args)=>{
    const { name, entityFields, operations, scope } = args;
    const fieldsTypeName = (0, _formatLabels.toWords)(`${name}-${scope || ''}-Fields`, true);
    const fields = {
        fields: {
            type: new _graphql.GraphQLObjectType({
                name: fieldsTypeName,
                fields: buildFields(fieldsTypeName, entityFields)
            })
        }
    };
    operations.forEach((operation)=>{
        const operationTypeName = (0, _formatLabels.toWords)(`${name}-${operation}-${scope || 'Access'}`, true);
        fields[operation] = {
            type: new _graphql.GraphQLObjectType({
                name: operationTypeName,
                fields: {
                    permission: {
                        type: new _graphql.GraphQLNonNull(_graphql.GraphQLBoolean)
                    },
                    where: {
                        type: _graphqltypejson.GraphQLJSONObject
                    }
                }
            })
        };
    });
    return fields;
};
function buildPolicyType(args) {
    const { entity, scope, type, typeSuffix } = args;
    const { fields, graphQL, slug, versions } = entity;
    let operations = [];
    if (graphQL === false) return null;
    if (type === 'collection') {
        operations = [
            'create',
            'read',
            'update',
            'delete'
        ];
        if (entity.auth && typeof entity.auth === 'object' && typeof entity.auth.maxLoginAttempts !== 'undefined' && entity.auth.maxLoginAttempts !== 0) {
            operations.push('unlock');
        }
        if (versions) {
            operations.push('readVersions');
        }
        const collectionTypeName = (0, _formatName.default)(`${slug}${typeSuffix || ''}`);
        return new _graphql.GraphQLObjectType({
            name: collectionTypeName,
            fields: buildEntityPolicy({
                name: slug,
                entityFields: fields,
                operations,
                scope
            })
        });
    }
    // else create global type
    operations = [
        'read',
        'update'
    ];
    if (entity.versions) {
        operations.push('readVersions');
    }
    const globalTypeName = (0, _formatName.default)(`${global?.graphQL?.name || slug}${typeSuffix || ''}`);
    return new _graphql.GraphQLObjectType({
        name: globalTypeName,
        fields: buildEntityPolicy({
            name: entity.graphQL ? entity?.graphQL?.name || slug : slug,
            entityFields: entity.fields,
            operations,
            scope
        })
    });
}
function buildPoliciesType(payload) {
    const fields = {
        canAccessAdmin: {
            type: new _graphql.GraphQLNonNull(_graphql.GraphQLBoolean)
        }
    };
    Object.values(payload.config.collections).forEach((collection)=>{
        if (collection.graphQL === false) {
            return;
        }
        const collectionPolicyType = buildPolicyType({
            entity: collection,
            type: 'collection',
            typeSuffix: 'Access'
        });
        fields[(0, _formatName.default)(collection.slug)] = {
            type: collectionPolicyType
        };
    });
    Object.values(payload.config.globals).forEach((global1)=>{
        if (global1.graphQL === false) {
            return;
        }
        const globalPolicyType = buildPolicyType({
            entity: global1,
            type: 'global',
            typeSuffix: 'Access'
        });
        fields[(0, _formatName.default)(global1.slug)] = {
            type: globalPolicyType
        };
    });
    return new _graphql.GraphQLObjectType({
        name: 'Access',
        fields
    });
}

//# sourceMappingURL=data:application/json;base64,