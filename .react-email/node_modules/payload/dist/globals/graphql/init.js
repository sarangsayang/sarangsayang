/* eslint-disable no-param-reassign */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _graphql = require("graphql");
const _pluralize = require("pluralize");
const _buildMutationInputType = /*#__PURE__*/ _interop_require_default(require("../../graphql/schema/buildMutationInputType"));
const _buildObjectType = /*#__PURE__*/ _interop_require_default(require("../../graphql/schema/buildObjectType"));
const _buildPaginatedListType = /*#__PURE__*/ _interop_require_default(require("../../graphql/schema/buildPaginatedListType"));
const _buildPoliciesType = require("../../graphql/schema/buildPoliciesType");
const _buildWhereInputType = /*#__PURE__*/ _interop_require_default(require("../../graphql/schema/buildWhereInputType"));
const _formatName = /*#__PURE__*/ _interop_require_default(require("../../graphql/utilities/formatName"));
const _formatLabels = require("../../utilities/formatLabels");
const _buildGlobalFields = require("../../versions/buildGlobalFields");
const _docAccess = require("./resolvers/docAccess");
const _findOne = /*#__PURE__*/ _interop_require_default(require("./resolvers/findOne"));
const _findVersionByID = /*#__PURE__*/ _interop_require_default(require("./resolvers/findVersionByID"));
const _findVersions = /*#__PURE__*/ _interop_require_default(require("./resolvers/findVersions"));
const _restoreVersion = /*#__PURE__*/ _interop_require_default(require("./resolvers/restoreVersion"));
const _update = /*#__PURE__*/ _interop_require_default(require("./resolvers/update"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function initGlobalsGraphQL(payload) {
    Object.keys(payload.globals.config).forEach((slug)=>{
        const global = payload.globals.config[slug];
        const { fields, graphQL, versions } = global;
        if (graphQL === false) {
            return;
        }
        const formattedName = graphQL?.name ? graphQL.name : (0, _pluralize.singular)((0, _formatLabels.toWords)(global.slug, true));
        const forceNullableObjectType = Boolean(versions?.drafts);
        if (!payload.globals.graphQL) payload.globals.graphQL = {};
        const updateMutationInputType = (0, _buildMutationInputType.default)(payload, formattedName, fields, formattedName);
        payload.globals.graphQL[slug] = {
            mutationInputType: updateMutationInputType ? new _graphql.GraphQLNonNull(updateMutationInputType) : null,
            type: (0, _buildObjectType.default)({
                name: formattedName,
                fields,
                forceNullable: forceNullableObjectType,
                parentName: formattedName,
                payload
            })
        };
        payload.Query.fields[formattedName] = {
            args: {
                draft: {
                    type: _graphql.GraphQLBoolean
                },
                ...payload.config.localization ? {
                    fallbackLocale: {
                        type: payload.types.fallbackLocaleInputType
                    },
                    locale: {
                        type: payload.types.localeInputType
                    }
                } : {}
            },
            resolve: (0, _findOne.default)(global),
            type: payload.globals.graphQL[slug].type
        };
        payload.Mutation.fields[`update${formattedName}`] = {
            args: {
                ...updateMutationInputType ? {
                    data: {
                        type: payload.globals.graphQL[slug].mutationInputType
                    }
                } : {},
                draft: {
                    type: _graphql.GraphQLBoolean
                },
                ...payload.config.localization ? {
                    locale: {
                        type: payload.types.localeInputType
                    }
                } : {}
            },
            resolve: (0, _update.default)(global),
            type: payload.globals.graphQL[slug].type
        };
        payload.Query.fields[`docAccess${formattedName}`] = {
            resolve: (0, _docAccess.docAccessResolver)(global),
            type: (0, _buildPoliciesType.buildPolicyType)({
                entity: global,
                scope: 'docAccess',
                type: 'global',
                typeSuffix: 'DocAccess'
            })
        };
        if (global.versions) {
            const idType = payload.db.defaultIDType === 'number' ? _graphql.GraphQLInt : _graphql.GraphQLString;
            const versionGlobalFields = [
                ...(0, _buildGlobalFields.buildVersionGlobalFields)(global),
                {
                    name: 'id',
                    type: payload.db.defaultIDType
                },
                {
                    name: 'createdAt',
                    label: 'Created At',
                    type: 'date'
                },
                {
                    name: 'updatedAt',
                    label: 'Updated At',
                    type: 'date'
                }
            ];
            payload.globals.graphQL[slug].versionType = (0, _buildObjectType.default)({
                name: `${formattedName}Version`,
                fields: versionGlobalFields,
                forceNullable: forceNullableObjectType,
                parentName: `${formattedName}Version`,
                payload
            });
            payload.Query.fields[`version${(0, _formatName.default)(formattedName)}`] = {
                args: {
                    id: {
                        type: idType
                    },
                    ...payload.config.localization ? {
                        fallbackLocale: {
                            type: payload.types.fallbackLocaleInputType
                        },
                        locale: {
                            type: payload.types.localeInputType
                        }
                    } : {}
                },
                resolve: (0, _findVersionByID.default)(global),
                type: payload.globals.graphQL[slug].versionType
            };
            payload.Query.fields[`versions${formattedName}`] = {
                args: {
                    where: {
                        type: (0, _buildWhereInputType.default)({
                            name: `versions${formattedName}`,
                            fields: versionGlobalFields,
                            parentName: `versions${formattedName}`,
                            payload
                        })
                    },
                    ...payload.config.localization ? {
                        fallbackLocale: {
                            type: payload.types.fallbackLocaleInputType
                        },
                        locale: {
                            type: payload.types.localeInputType
                        }
                    } : {},
                    limit: {
                        type: _graphql.GraphQLInt
                    },
                    page: {
                        type: _graphql.GraphQLInt
                    },
                    sort: {
                        type: _graphql.GraphQLString
                    }
                },
                resolve: (0, _findVersions.default)(global),
                type: (0, _buildPaginatedListType.default)(`versions${(0, _formatName.default)(formattedName)}`, payload.globals.graphQL[slug].versionType)
            };
            payload.Mutation.fields[`restoreVersion${(0, _formatName.default)(formattedName)}`] = {
                args: {
                    id: {
                        type: idType
                    }
                },
                resolve: (0, _restoreVersion.default)(global),
                type: payload.globals.graphQL[slug].type
            };
        }
    });
}
const _default = initGlobalsGraphQL;

//# sourceMappingURL=data:application/json;base64,