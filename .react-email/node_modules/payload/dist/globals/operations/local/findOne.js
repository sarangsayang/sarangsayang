"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return findOneLocal;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _findOne = /*#__PURE__*/ _interop_require_default(require("../findOne"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findOneLocal(payload, options) {
    const { context, depth, draft = false, fallbackLocale: fallbackLocaleArg = options?.req?.fallbackLocale, locale = payload.config.localization ? payload.config.localization?.defaultLocale : null, overrideAccess = true, showHiddenFields, slug: globalSlug, user } = options;
    const globalConfig = payload.globals.config.find((config)=>config.slug === globalSlug);
    const localizationConfig = payload?.config?.localization;
    const defaultLocale = payload?.config?.localization ? payload?.config?.localization?.defaultLocale : null;
    const fallbackLocale = localizationConfig ? localizationConfig.locales.find(({ code })=>locale === code)?.fallbackLocale : null;
    if (!globalConfig) {
        throw new _errors.APIError(`The global with slug ${String(globalSlug)} can't be found.`);
    }
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    const req = {
        fallbackLocale: typeof fallbackLocaleArg !== 'undefined' ? fallbackLocaleArg : fallbackLocale || defaultLocale,
        i18n,
        locale: locale ?? options.req?.locale ?? defaultLocale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        user
    };
    (0, _setRequestContext.setRequestContext)(req, context);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _findOne.default)({
        depth,
        draft,
        globalConfig,
        overrideAccess,
        req,
        showHiddenFields,
        slug: globalSlug
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9nbG9iYWxzL29wZXJhdGlvbnMvbG9jYWwvZmluZE9uZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEdlbmVyYXRlZFR5cGVzLCBSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3MvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWQgfSBmcm9tICcuLi8uLi8uLi9wYXlsb2FkJ1xuaW1wb3J0IHR5cGUgeyBEb2N1bWVudCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuXG5pbXBvcnQgeyBnZXREYXRhTG9hZGVyIH0gZnJvbSAnLi4vLi4vLi4vY29sbGVjdGlvbnMvZGF0YWxvYWRlcidcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJ1xuaW1wb3J0IHsgc2V0UmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3NldFJlcXVlc3RDb250ZXh0J1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbnMvaW5pdCdcbmltcG9ydCBmaW5kT25lIGZyb20gJy4uL2ZpbmRPbmUnXG5cbmV4cG9ydCB0eXBlIE9wdGlvbnM8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydnbG9iYWxzJ10+ID0ge1xuICBjb250ZXh0PzogUmVxdWVzdENvbnRleHRcbiAgZGVwdGg/OiBudW1iZXJcbiAgZHJhZnQ/OiBib29sZWFuXG4gIGZhbGxiYWNrTG9jYWxlPzogc3RyaW5nXG4gIGxvY2FsZT86IHN0cmluZ1xuICBvdmVycmlkZUFjY2Vzcz86IGJvb2xlYW5cbiAgcmVxPzogUGF5bG9hZFJlcXVlc3RcbiAgc2hvd0hpZGRlbkZpZWxkcz86IGJvb2xlYW5cbiAgc2x1ZzogVFxuICB1c2VyPzogRG9jdW1lbnRcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZmluZE9uZUxvY2FsPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snZ2xvYmFscyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogT3B0aW9uczxUPixcbik6IFByb21pc2U8R2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXVtUXT4ge1xuICBjb25zdCB7XG4gICAgY29udGV4dCxcbiAgICBkZXB0aCxcbiAgICBkcmFmdCA9IGZhbHNlLFxuICAgIGZhbGxiYWNrTG9jYWxlOiBmYWxsYmFja0xvY2FsZUFyZyA9IG9wdGlvbnM/LnJlcT8uZmFsbGJhY2tMb2NhbGUsXG4gICAgbG9jYWxlID0gcGF5bG9hZC5jb25maWcubG9jYWxpemF0aW9uID8gcGF5bG9hZC5jb25maWcubG9jYWxpemF0aW9uPy5kZWZhdWx0TG9jYWxlIDogbnVsbCxcbiAgICBvdmVycmlkZUFjY2VzcyA9IHRydWUsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICBzbHVnOiBnbG9iYWxTbHVnLFxuICAgIHVzZXIsXG4gIH0gPSBvcHRpb25zXG5cbiAgY29uc3QgZ2xvYmFsQ29uZmlnID0gcGF5bG9hZC5nbG9iYWxzLmNvbmZpZy5maW5kKChjb25maWcpID0+IGNvbmZpZy5zbHVnID09PSBnbG9iYWxTbHVnKVxuICBjb25zdCBsb2NhbGl6YXRpb25Db25maWcgPSBwYXlsb2FkPy5jb25maWc/LmxvY2FsaXphdGlvblxuICBjb25zdCBkZWZhdWx0TG9jYWxlID0gcGF5bG9hZD8uY29uZmlnPy5sb2NhbGl6YXRpb25cbiAgICA/IHBheWxvYWQ/LmNvbmZpZz8ubG9jYWxpemF0aW9uPy5kZWZhdWx0TG9jYWxlXG4gICAgOiBudWxsXG4gIGNvbnN0IGZhbGxiYWNrTG9jYWxlID0gbG9jYWxpemF0aW9uQ29uZmlnXG4gICAgPyBsb2NhbGl6YXRpb25Db25maWcubG9jYWxlcy5maW5kKCh7IGNvZGUgfSkgPT4gbG9jYWxlID09PSBjb2RlKT8uZmFsbGJhY2tMb2NhbGVcbiAgICA6IG51bGxcblxuICBpZiAoIWdsb2JhbENvbmZpZykge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihgVGhlIGdsb2JhbCB3aXRoIHNsdWcgJHtTdHJpbmcoZ2xvYmFsU2x1Zyl9IGNhbid0IGJlIGZvdW5kLmApXG4gIH1cblxuICBjb25zdCBpMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcblxuICBjb25zdCByZXEgPSB7XG4gICAgZmFsbGJhY2tMb2NhbGU6XG4gICAgICB0eXBlb2YgZmFsbGJhY2tMb2NhbGVBcmcgIT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gZmFsbGJhY2tMb2NhbGVBcmdcbiAgICAgICAgOiBmYWxsYmFja0xvY2FsZSB8fCBkZWZhdWx0TG9jYWxlLFxuICAgIGkxOG4sXG4gICAgbG9jYWxlOiBsb2NhbGUgPz8gb3B0aW9ucy5yZXE/LmxvY2FsZSA/PyBkZWZhdWx0TG9jYWxlLFxuICAgIHBheWxvYWQsXG4gICAgcGF5bG9hZEFQSTogJ2xvY2FsJyxcbiAgICB0OiBpMThuLnQsXG4gICAgdXNlcixcbiAgfSBhcyBQYXlsb2FkUmVxdWVzdFxuICBzZXRSZXF1ZXN0Q29udGV4dChyZXEsIGNvbnRleHQpXG5cbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIHJldHVybiBmaW5kT25lKHtcbiAgICBkZXB0aCxcbiAgICBkcmFmdCxcbiAgICBnbG9iYWxDb25maWcsXG4gICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgcmVxLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgc2x1ZzogZ2xvYmFsU2x1ZyBhcyBzdHJpbmcsXG4gIH0pXG59XG4iXSwibmFtZXMiOlsiZmluZE9uZUxvY2FsIiwicGF5bG9hZCIsIm9wdGlvbnMiLCJjb250ZXh0IiwiZGVwdGgiLCJkcmFmdCIsImZhbGxiYWNrTG9jYWxlIiwiZmFsbGJhY2tMb2NhbGVBcmciLCJyZXEiLCJsb2NhbGUiLCJjb25maWciLCJsb2NhbGl6YXRpb24iLCJkZWZhdWx0TG9jYWxlIiwib3ZlcnJpZGVBY2Nlc3MiLCJzaG93SGlkZGVuRmllbGRzIiwic2x1ZyIsImdsb2JhbFNsdWciLCJ1c2VyIiwiZ2xvYmFsQ29uZmlnIiwiZ2xvYmFscyIsImZpbmQiLCJsb2NhbGl6YXRpb25Db25maWciLCJsb2NhbGVzIiwiY29kZSIsIkFQSUVycm9yIiwiU3RyaW5nIiwiaTE4biIsImkxOG5Jbml0IiwicGF5bG9hZEFQSSIsInQiLCJzZXRSZXF1ZXN0Q29udGV4dCIsInBheWxvYWREYXRhTG9hZGVyIiwiZ2V0RGF0YUxvYWRlciIsImZpbmRPbmUiXSwibWFwcGluZ3MiOiI7Ozs7K0JBd0JBOzs7ZUFBOEJBOzs7NEJBbkJBO3dCQUNMO21DQUNTO3NCQUNUO2dFQUNMOzs7Ozs7QUFlTCxlQUFlQSxhQUM1QkMsT0FBZ0IsRUFDaEJDLE9BQW1CO0lBRW5CLE1BQU0sRUFDSkMsT0FBTyxFQUNQQyxLQUFLLEVBQ0xDLFFBQVEsS0FBSyxFQUNiQyxnQkFBZ0JDLG9CQUFvQkwsU0FBU00sS0FBS0YsY0FBYyxFQUNoRUcsU0FBU1IsUUFBUVMsTUFBTSxDQUFDQyxZQUFZLEdBQUdWLFFBQVFTLE1BQU0sQ0FBQ0MsWUFBWSxFQUFFQyxnQkFBZ0IsSUFBSSxFQUN4RkMsaUJBQWlCLElBQUksRUFDckJDLGdCQUFnQixFQUNoQkMsTUFBTUMsVUFBVSxFQUNoQkMsSUFBSSxFQUNMLEdBQUdmO0lBRUosTUFBTWdCLGVBQWVqQixRQUFRa0IsT0FBTyxDQUFDVCxNQUFNLENBQUNVLElBQUksQ0FBQyxDQUFDVixTQUFXQSxPQUFPSyxJQUFJLEtBQUtDO0lBQzdFLE1BQU1LLHFCQUFxQnBCLFNBQVNTLFFBQVFDO0lBQzVDLE1BQU1DLGdCQUFnQlgsU0FBU1MsUUFBUUMsZUFDbkNWLFNBQVNTLFFBQVFDLGNBQWNDLGdCQUMvQjtJQUNKLE1BQU1OLGlCQUFpQmUscUJBQ25CQSxtQkFBbUJDLE9BQU8sQ0FBQ0YsSUFBSSxDQUFDLENBQUMsRUFBRUcsSUFBSSxFQUFFLEdBQUtkLFdBQVdjLE9BQU9qQixpQkFDaEU7SUFFSixJQUFJLENBQUNZLGNBQWM7UUFDakIsTUFBTSxJQUFJTSxnQkFBUSxDQUFDLENBQUMscUJBQXFCLEVBQUVDLE9BQU9ULFlBQVksZ0JBQWdCLENBQUM7SUFDakY7SUFFQSxNQUFNVSxPQUFPQyxJQUFBQSxjQUFRLEVBQUMxQixRQUFRUyxNQUFNLENBQUNnQixJQUFJO0lBRXpDLE1BQU1sQixNQUFNO1FBQ1ZGLGdCQUNFLE9BQU9DLHNCQUFzQixjQUN6QkEsb0JBQ0FELGtCQUFrQk07UUFDeEJjO1FBQ0FqQixRQUFRQSxVQUFVUCxRQUFRTSxHQUFHLEVBQUVDLFVBQVVHO1FBQ3pDWDtRQUNBMkIsWUFBWTtRQUNaQyxHQUFHSCxLQUFLRyxDQUFDO1FBQ1RaO0lBQ0Y7SUFDQWEsSUFBQUEsb0NBQWlCLEVBQUN0QixLQUFLTDtJQUV2QixJQUFJLENBQUNLLElBQUl1QixpQkFBaUIsRUFBRXZCLElBQUl1QixpQkFBaUIsR0FBR0MsSUFBQUEseUJBQWEsRUFBQ3hCO0lBRWxFLE9BQU95QixJQUFBQSxnQkFBTyxFQUFDO1FBQ2I3QjtRQUNBQztRQUNBYTtRQUNBTDtRQUNBTDtRQUNBTTtRQUNBQyxNQUFNQztJQUNSO0FBQ0YifQ==