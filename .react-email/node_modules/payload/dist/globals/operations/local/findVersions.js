"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return findVersionsLocal;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _findVersions = /*#__PURE__*/ _interop_require_default(require("../findVersions"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findVersionsLocal(payload, options) {
    const { context, depth, fallbackLocale: fallbackLocaleArg = options?.req?.fallbackLocale, limit, locale = payload.config.localization ? payload.config.localization?.defaultLocale : null, overrideAccess = true, page, req: incomingReq, showHiddenFields, slug: globalSlug, sort, user, where } = options;
    const globalConfig = payload.globals.config.find((config)=>config.slug === globalSlug);
    const localizationConfig = payload?.config?.localization;
    const defaultLocale = payload?.config?.localization ? payload?.config?.localization?.defaultLocale : null;
    const fallbackLocale = localizationConfig ? localizationConfig.locales.find(({ code })=>locale === code)?.fallbackLocale : null;
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!globalConfig) {
        throw new _errors.APIError(`The global with slug ${String(globalSlug)} can't be found.`);
    }
    const req = {
        fallbackLocale: typeof fallbackLocaleArg !== 'undefined' ? fallbackLocaleArg : fallbackLocale || defaultLocale,
        i18n,
        locale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req, context);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _findVersions.default)({
        depth,
        globalConfig,
        limit,
        overrideAccess,
        page,
        req,
        showHiddenFields,
        sort,
        where
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9nbG9iYWxzL29wZXJhdGlvbnMvbG9jYWwvZmluZFZlcnNpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgR2VuZXJhdGVkVHlwZXMsIFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vJ1xuaW1wb3J0IHR5cGUgeyBQYWdpbmF0ZWREb2NzIH0gZnJvbSAnLi4vLi4vLi4vZGF0YWJhc2UvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy90eXBlcydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZCB9IGZyb20gJy4uLy4uLy4uL3BheWxvYWQnXG5pbXBvcnQgdHlwZSB7IERvY3VtZW50LCBXaGVyZSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBUeXBlV2l0aFZlcnNpb24gfSBmcm9tICcuLi8uLi8uLi92ZXJzaW9ucy90eXBlcydcblxuaW1wb3J0IHsgZ2V0RGF0YUxvYWRlciB9IGZyb20gJy4uLy4uLy4uL2NvbGxlY3Rpb25zL2RhdGFsb2FkZXInXG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycydcbmltcG9ydCB7IHNldFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy9zZXRSZXF1ZXN0Q29udGV4dCdcbmltcG9ydCB7IGkxOG5Jbml0IH0gZnJvbSAnLi4vLi4vLi4vdHJhbnNsYXRpb25zL2luaXQnXG5pbXBvcnQgZmluZFZlcnNpb25zIGZyb20gJy4uL2ZpbmRWZXJzaW9ucydcblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXT4gPSB7XG4gIGNvbnRleHQ/OiBSZXF1ZXN0Q29udGV4dFxuICBkZXB0aD86IG51bWJlclxuICBmYWxsYmFja0xvY2FsZT86IHN0cmluZ1xuICBsaW1pdD86IG51bWJlclxuICBsb2NhbGU/OiBzdHJpbmdcbiAgb3ZlcnJpZGVBY2Nlc3M/OiBib29sZWFuXG4gIHBhZ2U/OiBudW1iZXJcbiAgcmVxPzogUGF5bG9hZFJlcXVlc3RcbiAgc2hvd0hpZGRlbkZpZWxkcz86IGJvb2xlYW5cbiAgc2x1ZzogVFxuICBzb3J0Pzogc3RyaW5nXG4gIHVzZXI/OiBEb2N1bWVudFxuICB3aGVyZT86IFdoZXJlXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGZpbmRWZXJzaW9uc0xvY2FsPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snZ2xvYmFscyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogT3B0aW9uczxUPixcbik6IFByb21pc2U8UGFnaW5hdGVkRG9jczxUeXBlV2l0aFZlcnNpb248R2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXVtUXT4+PiB7XG4gIGNvbnN0IHtcbiAgICBjb250ZXh0LFxuICAgIGRlcHRoLFxuICAgIGZhbGxiYWNrTG9jYWxlOiBmYWxsYmFja0xvY2FsZUFyZyA9IG9wdGlvbnM/LnJlcT8uZmFsbGJhY2tMb2NhbGUsXG4gICAgbGltaXQsXG4gICAgbG9jYWxlID0gcGF5bG9hZC5jb25maWcubG9jYWxpemF0aW9uID8gcGF5bG9hZC5jb25maWcubG9jYWxpemF0aW9uPy5kZWZhdWx0TG9jYWxlIDogbnVsbCxcbiAgICBvdmVycmlkZUFjY2VzcyA9IHRydWUsXG4gICAgcGFnZSxcbiAgICByZXE6IGluY29taW5nUmVxLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgc2x1ZzogZ2xvYmFsU2x1ZyxcbiAgICBzb3J0LFxuICAgIHVzZXIsXG4gICAgd2hlcmUsXG4gIH0gPSBvcHRpb25zXG5cbiAgY29uc3QgZ2xvYmFsQ29uZmlnID0gcGF5bG9hZC5nbG9iYWxzLmNvbmZpZy5maW5kKChjb25maWcpID0+IGNvbmZpZy5zbHVnID09PSBnbG9iYWxTbHVnKVxuICBjb25zdCBsb2NhbGl6YXRpb25Db25maWcgPSBwYXlsb2FkPy5jb25maWc/LmxvY2FsaXphdGlvblxuICBjb25zdCBkZWZhdWx0TG9jYWxlID0gcGF5bG9hZD8uY29uZmlnPy5sb2NhbGl6YXRpb25cbiAgICA/IHBheWxvYWQ/LmNvbmZpZz8ubG9jYWxpemF0aW9uPy5kZWZhdWx0TG9jYWxlXG4gICAgOiBudWxsXG4gIGNvbnN0IGZhbGxiYWNrTG9jYWxlID0gbG9jYWxpemF0aW9uQ29uZmlnXG4gICAgPyBsb2NhbGl6YXRpb25Db25maWcubG9jYWxlcy5maW5kKCh7IGNvZGUgfSkgPT4gbG9jYWxlID09PSBjb2RlKT8uZmFsbGJhY2tMb2NhbGVcbiAgICA6IG51bGxcbiAgY29uc3QgaTE4biA9IGkxOG5Jbml0KHBheWxvYWQuY29uZmlnLmkxOG4pXG5cbiAgaWYgKCFnbG9iYWxDb25maWcpIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoYFRoZSBnbG9iYWwgd2l0aCBzbHVnICR7U3RyaW5nKGdsb2JhbFNsdWcpfSBjYW4ndCBiZSBmb3VuZC5gKVxuICB9XG5cbiAgY29uc3QgcmVxID0ge1xuICAgIGZhbGxiYWNrTG9jYWxlOlxuICAgICAgdHlwZW9mIGZhbGxiYWNrTG9jYWxlQXJnICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGZhbGxiYWNrTG9jYWxlQXJnXG4gICAgICAgIDogZmFsbGJhY2tMb2NhbGUgfHwgZGVmYXVsdExvY2FsZSxcbiAgICBpMThuLFxuICAgIGxvY2FsZSxcbiAgICBwYXlsb2FkLFxuICAgIHBheWxvYWRBUEk6ICdsb2NhbCcsXG4gICAgdDogaTE4bi50LFxuICAgIHRyYW5zYWN0aW9uSUQ6IGluY29taW5nUmVxPy50cmFuc2FjdGlvbklELFxuICAgIHVzZXIsXG4gIH0gYXMgUGF5bG9hZFJlcXVlc3RcbiAgc2V0UmVxdWVzdENvbnRleHQocmVxLCBjb250ZXh0KVxuXG4gIGlmICghcmVxLnBheWxvYWREYXRhTG9hZGVyKSByZXEucGF5bG9hZERhdGFMb2FkZXIgPSBnZXREYXRhTG9hZGVyKHJlcSlcblxuICByZXR1cm4gZmluZFZlcnNpb25zKHtcbiAgICBkZXB0aCxcbiAgICBnbG9iYWxDb25maWcsXG4gICAgbGltaXQsXG4gICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgcGFnZSxcbiAgICByZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICBzb3J0LFxuICAgIHdoZXJlLFxuICB9KVxufVxuIl0sIm5hbWVzIjpbImZpbmRWZXJzaW9uc0xvY2FsIiwicGF5bG9hZCIsIm9wdGlvbnMiLCJjb250ZXh0IiwiZGVwdGgiLCJmYWxsYmFja0xvY2FsZSIsImZhbGxiYWNrTG9jYWxlQXJnIiwicmVxIiwibGltaXQiLCJsb2NhbGUiLCJjb25maWciLCJsb2NhbGl6YXRpb24iLCJkZWZhdWx0TG9jYWxlIiwib3ZlcnJpZGVBY2Nlc3MiLCJwYWdlIiwiaW5jb21pbmdSZXEiLCJzaG93SGlkZGVuRmllbGRzIiwic2x1ZyIsImdsb2JhbFNsdWciLCJzb3J0IiwidXNlciIsIndoZXJlIiwiZ2xvYmFsQ29uZmlnIiwiZ2xvYmFscyIsImZpbmQiLCJsb2NhbGl6YXRpb25Db25maWciLCJsb2NhbGVzIiwiY29kZSIsImkxOG4iLCJpMThuSW5pdCIsIkFQSUVycm9yIiwiU3RyaW5nIiwicGF5bG9hZEFQSSIsInQiLCJ0cmFuc2FjdGlvbklEIiwic2V0UmVxdWVzdENvbnRleHQiLCJwYXlsb2FkRGF0YUxvYWRlciIsImdldERhdGFMb2FkZXIiLCJmaW5kVmVyc2lvbnMiXSwibWFwcGluZ3MiOiI7Ozs7K0JBNkJBOzs7ZUFBOEJBOzs7NEJBdEJBO3dCQUNMO21DQUNTO3NCQUNUO3FFQUNBOzs7Ozs7QUFrQlYsZUFBZUEsa0JBQzVCQyxPQUFnQixFQUNoQkMsT0FBbUI7SUFFbkIsTUFBTSxFQUNKQyxPQUFPLEVBQ1BDLEtBQUssRUFDTEMsZ0JBQWdCQyxvQkFBb0JKLFNBQVNLLEtBQUtGLGNBQWMsRUFDaEVHLEtBQUssRUFDTEMsU0FBU1IsUUFBUVMsTUFBTSxDQUFDQyxZQUFZLEdBQUdWLFFBQVFTLE1BQU0sQ0FBQ0MsWUFBWSxFQUFFQyxnQkFBZ0IsSUFBSSxFQUN4RkMsaUJBQWlCLElBQUksRUFDckJDLElBQUksRUFDSlAsS0FBS1EsV0FBVyxFQUNoQkMsZ0JBQWdCLEVBQ2hCQyxNQUFNQyxVQUFVLEVBQ2hCQyxJQUFJLEVBQ0pDLElBQUksRUFDSkMsS0FBSyxFQUNOLEdBQUduQjtJQUVKLE1BQU1vQixlQUFlckIsUUFBUXNCLE9BQU8sQ0FBQ2IsTUFBTSxDQUFDYyxJQUFJLENBQUMsQ0FBQ2QsU0FBV0EsT0FBT08sSUFBSSxLQUFLQztJQUM3RSxNQUFNTyxxQkFBcUJ4QixTQUFTUyxRQUFRQztJQUM1QyxNQUFNQyxnQkFBZ0JYLFNBQVNTLFFBQVFDLGVBQ25DVixTQUFTUyxRQUFRQyxjQUFjQyxnQkFDL0I7SUFDSixNQUFNUCxpQkFBaUJvQixxQkFDbkJBLG1CQUFtQkMsT0FBTyxDQUFDRixJQUFJLENBQUMsQ0FBQyxFQUFFRyxJQUFJLEVBQUUsR0FBS2xCLFdBQVdrQixPQUFPdEIsaUJBQ2hFO0lBQ0osTUFBTXVCLE9BQU9DLElBQUFBLGNBQVEsRUFBQzVCLFFBQVFTLE1BQU0sQ0FBQ2tCLElBQUk7SUFFekMsSUFBSSxDQUFDTixjQUFjO1FBQ2pCLE1BQU0sSUFBSVEsZ0JBQVEsQ0FBQyxDQUFDLHFCQUFxQixFQUFFQyxPQUFPYixZQUFZLGdCQUFnQixDQUFDO0lBQ2pGO0lBRUEsTUFBTVgsTUFBTTtRQUNWRixnQkFDRSxPQUFPQyxzQkFBc0IsY0FDekJBLG9CQUNBRCxrQkFBa0JPO1FBQ3hCZ0I7UUFDQW5CO1FBQ0FSO1FBQ0ErQixZQUFZO1FBQ1pDLEdBQUdMLEtBQUtLLENBQUM7UUFDVEMsZUFBZW5CLGFBQWFtQjtRQUM1QmQ7SUFDRjtJQUNBZSxJQUFBQSxvQ0FBaUIsRUFBQzVCLEtBQUtKO0lBRXZCLElBQUksQ0FBQ0ksSUFBSTZCLGlCQUFpQixFQUFFN0IsSUFBSTZCLGlCQUFpQixHQUFHQyxJQUFBQSx5QkFBYSxFQUFDOUI7SUFFbEUsT0FBTytCLElBQUFBLHFCQUFZLEVBQUM7UUFDbEJsQztRQUNBa0I7UUFDQWQ7UUFDQUs7UUFDQUM7UUFDQVA7UUFDQVM7UUFDQUc7UUFDQUU7SUFDRjtBQUNGIn0=