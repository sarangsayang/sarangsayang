"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return restoreVersionLocal;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _restoreVersion = /*#__PURE__*/ _interop_require_default(require("../restoreVersion"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function restoreVersionLocal(payload, options) {
    const { id, context, depth, fallbackLocale: fallbackLocaleArg = options?.req?.fallbackLocale, locale = payload.config.localization ? payload.config.localization?.defaultLocale : null, overrideAccess = true, req: incomingReq, showHiddenFields, slug: globalSlug, user } = options;
    const globalConfig = payload.globals.config.find((config)=>config.slug === globalSlug);
    const localizationConfig = payload?.config?.localization;
    const defaultLocale = payload?.config?.localization ? payload?.config?.localization?.defaultLocale : null;
    const fallbackLocale = localizationConfig ? localizationConfig.locales.find(({ code })=>locale === code)?.fallbackLocale : null;
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!globalConfig) {
        throw new _errors.APIError(`The global with slug ${String(globalSlug)} can't be found.`);
    }
    const req = {
        fallbackLocale: typeof fallbackLocaleArg !== 'undefined' ? fallbackLocaleArg : fallbackLocale || defaultLocale,
        i18n,
        locale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req, context);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _restoreVersion.default)({
        id,
        depth,
        globalConfig,
        overrideAccess,
        req,
        showHiddenFields
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9nbG9iYWxzL29wZXJhdGlvbnMvbG9jYWwvcmVzdG9yZVZlcnNpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBHZW5lcmF0ZWRUeXBlcywgUmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi8nXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy90eXBlcydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZCB9IGZyb20gJy4uLy4uLy4uL3BheWxvYWQnXG5pbXBvcnQgdHlwZSB7IERvY3VtZW50IH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5cbmltcG9ydCB7IGdldERhdGFMb2FkZXIgfSBmcm9tICcuLi8uLi8uLi9jb2xsZWN0aW9ucy9kYXRhbG9hZGVyJ1xuaW1wb3J0IHsgQVBJRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMnXG5pbXBvcnQgeyBzZXRSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3Mvc2V0UmVxdWVzdENvbnRleHQnXG5pbXBvcnQgeyBpMThuSW5pdCB9IGZyb20gJy4uLy4uLy4uL3RyYW5zbGF0aW9ucy9pbml0J1xuaW1wb3J0IHJlc3RvcmVWZXJzaW9uIGZyb20gJy4uL3Jlc3RvcmVWZXJzaW9uJ1xuXG5leHBvcnQgdHlwZSBPcHRpb25zPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snZ2xvYmFscyddPiA9IHtcbiAgY29udGV4dD86IFJlcXVlc3RDb250ZXh0XG4gIGRlcHRoPzogbnVtYmVyXG4gIGZhbGxiYWNrTG9jYWxlPzogc3RyaW5nXG4gIGlkOiBzdHJpbmdcbiAgbG9jYWxlPzogc3RyaW5nXG4gIG92ZXJyaWRlQWNjZXNzPzogYm9vbGVhblxuICByZXE/OiBQYXlsb2FkUmVxdWVzdFxuICBzaG93SGlkZGVuRmllbGRzPzogYm9vbGVhblxuICBzbHVnOiBzdHJpbmdcbiAgdXNlcj86IERvY3VtZW50XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHJlc3RvcmVWZXJzaW9uTG9jYWw8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydnbG9iYWxzJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBPcHRpb25zPFQ+LFxuKTogUHJvbWlzZTxHZW5lcmF0ZWRUeXBlc1snZ2xvYmFscyddW1RdPiB7XG4gIGNvbnN0IHtcbiAgICBpZCxcbiAgICBjb250ZXh0LFxuICAgIGRlcHRoLFxuICAgIGZhbGxiYWNrTG9jYWxlOiBmYWxsYmFja0xvY2FsZUFyZyA9IG9wdGlvbnM/LnJlcT8uZmFsbGJhY2tMb2NhbGUsXG4gICAgbG9jYWxlID0gcGF5bG9hZC5jb25maWcubG9jYWxpemF0aW9uID8gcGF5bG9hZC5jb25maWcubG9jYWxpemF0aW9uPy5kZWZhdWx0TG9jYWxlIDogbnVsbCxcbiAgICBvdmVycmlkZUFjY2VzcyA9IHRydWUsXG4gICAgcmVxOiBpbmNvbWluZ1JlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgIHNsdWc6IGdsb2JhbFNsdWcsXG4gICAgdXNlcixcbiAgfSA9IG9wdGlvbnNcblxuICBjb25zdCBnbG9iYWxDb25maWcgPSBwYXlsb2FkLmdsb2JhbHMuY29uZmlnLmZpbmQoKGNvbmZpZykgPT4gY29uZmlnLnNsdWcgPT09IGdsb2JhbFNsdWcpXG4gIGNvbnN0IGxvY2FsaXphdGlvbkNvbmZpZyA9IHBheWxvYWQ/LmNvbmZpZz8ubG9jYWxpemF0aW9uXG4gIGNvbnN0IGRlZmF1bHRMb2NhbGUgPSBwYXlsb2FkPy5jb25maWc/LmxvY2FsaXphdGlvblxuICAgID8gcGF5bG9hZD8uY29uZmlnPy5sb2NhbGl6YXRpb24/LmRlZmF1bHRMb2NhbGVcbiAgICA6IG51bGxcbiAgY29uc3QgZmFsbGJhY2tMb2NhbGUgPSBsb2NhbGl6YXRpb25Db25maWdcbiAgICA/IGxvY2FsaXphdGlvbkNvbmZpZy5sb2NhbGVzLmZpbmQoKHsgY29kZSB9KSA9PiBsb2NhbGUgPT09IGNvZGUpPy5mYWxsYmFja0xvY2FsZVxuICAgIDogbnVsbFxuICBjb25zdCBpMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcblxuICBpZiAoIWdsb2JhbENvbmZpZykge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihgVGhlIGdsb2JhbCB3aXRoIHNsdWcgJHtTdHJpbmcoZ2xvYmFsU2x1Zyl9IGNhbid0IGJlIGZvdW5kLmApXG4gIH1cblxuICBjb25zdCByZXEgPSB7XG4gICAgZmFsbGJhY2tMb2NhbGU6XG4gICAgICB0eXBlb2YgZmFsbGJhY2tMb2NhbGVBcmcgIT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gZmFsbGJhY2tMb2NhbGVBcmdcbiAgICAgICAgOiBmYWxsYmFja0xvY2FsZSB8fCBkZWZhdWx0TG9jYWxlLFxuICAgIGkxOG4sXG4gICAgbG9jYWxlLFxuICAgIHBheWxvYWQsXG4gICAgcGF5bG9hZEFQSTogJ2xvY2FsJyxcbiAgICB0OiBpMThuLnQsXG4gICAgdHJhbnNhY3Rpb25JRDogaW5jb21pbmdSZXE/LnRyYW5zYWN0aW9uSUQsXG4gICAgdXNlcixcbiAgfSBhcyBQYXlsb2FkUmVxdWVzdFxuICBzZXRSZXF1ZXN0Q29udGV4dChyZXEsIGNvbnRleHQpXG5cbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIHJldHVybiByZXN0b3JlVmVyc2lvbih7XG4gICAgaWQsXG4gICAgZGVwdGgsXG4gICAgZ2xvYmFsQ29uZmlnLFxuICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgIHJlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICB9KVxufVxuIl0sIm5hbWVzIjpbInJlc3RvcmVWZXJzaW9uTG9jYWwiLCJwYXlsb2FkIiwib3B0aW9ucyIsImlkIiwiY29udGV4dCIsImRlcHRoIiwiZmFsbGJhY2tMb2NhbGUiLCJmYWxsYmFja0xvY2FsZUFyZyIsInJlcSIsImxvY2FsZSIsImNvbmZpZyIsImxvY2FsaXphdGlvbiIsImRlZmF1bHRMb2NhbGUiLCJvdmVycmlkZUFjY2VzcyIsImluY29taW5nUmVxIiwic2hvd0hpZGRlbkZpZWxkcyIsInNsdWciLCJnbG9iYWxTbHVnIiwidXNlciIsImdsb2JhbENvbmZpZyIsImdsb2JhbHMiLCJmaW5kIiwibG9jYWxpemF0aW9uQ29uZmlnIiwibG9jYWxlcyIsImNvZGUiLCJpMThuIiwiaTE4bkluaXQiLCJBUElFcnJvciIsIlN0cmluZyIsInBheWxvYWRBUEkiLCJ0IiwidHJhbnNhY3Rpb25JRCIsInNldFJlcXVlc3RDb250ZXh0IiwicGF5bG9hZERhdGFMb2FkZXIiLCJnZXREYXRhTG9hZGVyIiwicmVzdG9yZVZlcnNpb24iXSwibWFwcGluZ3MiOiI7Ozs7K0JBd0JBOzs7ZUFBOEJBOzs7NEJBbkJBO3dCQUNMO21DQUNTO3NCQUNUO3VFQUNFOzs7Ozs7QUFlWixlQUFlQSxvQkFDNUJDLE9BQWdCLEVBQ2hCQyxPQUFtQjtJQUVuQixNQUFNLEVBQ0pDLEVBQUUsRUFDRkMsT0FBTyxFQUNQQyxLQUFLLEVBQ0xDLGdCQUFnQkMsb0JBQW9CTCxTQUFTTSxLQUFLRixjQUFjLEVBQ2hFRyxTQUFTUixRQUFRUyxNQUFNLENBQUNDLFlBQVksR0FBR1YsUUFBUVMsTUFBTSxDQUFDQyxZQUFZLEVBQUVDLGdCQUFnQixJQUFJLEVBQ3hGQyxpQkFBaUIsSUFBSSxFQUNyQkwsS0FBS00sV0FBVyxFQUNoQkMsZ0JBQWdCLEVBQ2hCQyxNQUFNQyxVQUFVLEVBQ2hCQyxJQUFJLEVBQ0wsR0FBR2hCO0lBRUosTUFBTWlCLGVBQWVsQixRQUFRbUIsT0FBTyxDQUFDVixNQUFNLENBQUNXLElBQUksQ0FBQyxDQUFDWCxTQUFXQSxPQUFPTSxJQUFJLEtBQUtDO0lBQzdFLE1BQU1LLHFCQUFxQnJCLFNBQVNTLFFBQVFDO0lBQzVDLE1BQU1DLGdCQUFnQlgsU0FBU1MsUUFBUUMsZUFDbkNWLFNBQVNTLFFBQVFDLGNBQWNDLGdCQUMvQjtJQUNKLE1BQU1OLGlCQUFpQmdCLHFCQUNuQkEsbUJBQW1CQyxPQUFPLENBQUNGLElBQUksQ0FBQyxDQUFDLEVBQUVHLElBQUksRUFBRSxHQUFLZixXQUFXZSxPQUFPbEIsaUJBQ2hFO0lBQ0osTUFBTW1CLE9BQU9DLElBQUFBLGNBQVEsRUFBQ3pCLFFBQVFTLE1BQU0sQ0FBQ2UsSUFBSTtJQUV6QyxJQUFJLENBQUNOLGNBQWM7UUFDakIsTUFBTSxJQUFJUSxnQkFBUSxDQUFDLENBQUMscUJBQXFCLEVBQUVDLE9BQU9YLFlBQVksZ0JBQWdCLENBQUM7SUFDakY7SUFFQSxNQUFNVCxNQUFNO1FBQ1ZGLGdCQUNFLE9BQU9DLHNCQUFzQixjQUN6QkEsb0JBQ0FELGtCQUFrQk07UUFDeEJhO1FBQ0FoQjtRQUNBUjtRQUNBNEIsWUFBWTtRQUNaQyxHQUFHTCxLQUFLSyxDQUFDO1FBQ1RDLGVBQWVqQixhQUFhaUI7UUFDNUJiO0lBQ0Y7SUFDQWMsSUFBQUEsb0NBQWlCLEVBQUN4QixLQUFLSjtJQUV2QixJQUFJLENBQUNJLElBQUl5QixpQkFBaUIsRUFBRXpCLElBQUl5QixpQkFBaUIsR0FBR0MsSUFBQUEseUJBQWEsRUFBQzFCO0lBRWxFLE9BQU8yQixJQUFBQSx1QkFBYyxFQUFDO1FBQ3BCaEM7UUFDQUU7UUFDQWM7UUFDQU47UUFDQUw7UUFDQU87SUFDRjtBQUNGIn0=