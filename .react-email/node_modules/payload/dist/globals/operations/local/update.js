"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return updateLocal;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _update = /*#__PURE__*/ _interop_require_default(require("../update"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function updateLocal(payload, options) {
    const { context, data, depth, draft, fallbackLocale: fallbackLocaleArg = options?.req?.fallbackLocale, locale = payload.config.localization ? payload.config.localization?.defaultLocale : null, overrideAccess = true, req: incomingReq, showHiddenFields, slug: globalSlug, user } = options;
    const globalConfig = payload.globals.config.find((config)=>config.slug === globalSlug);
    const localizationConfig = payload?.config?.localization;
    const defaultLocale = payload?.config?.localization ? payload?.config?.localization?.defaultLocale : null;
    const fallbackLocale = localizationConfig ? localizationConfig.locales.find(({ code })=>locale === code)?.fallbackLocale : null;
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!globalConfig) {
        throw new _errors.APIError(`The global with slug ${String(globalSlug)} can't be found.`);
    }
    const req = {
        fallbackLocale: typeof fallbackLocaleArg !== 'undefined' ? fallbackLocaleArg : fallbackLocale || defaultLocale,
        i18n,
        locale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req, context);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _update.default)({
        data,
        depth,
        draft,
        globalConfig,
        overrideAccess,
        req,
        showHiddenFields,
        slug: globalSlug
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9nbG9iYWxzL29wZXJhdGlvbnMvbG9jYWwvdXBkYXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRGVlcFBhcnRpYWwgfSBmcm9tICd0cy1lc3NlbnRpYWxzJ1xuXG5pbXBvcnQgdHlwZSB7IEdlbmVyYXRlZFR5cGVzLCBSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uLydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkIH0gZnJvbSAnLi4vLi4vLi4vcGF5bG9hZCdcbmltcG9ydCB0eXBlIHsgRG9jdW1lbnQgfSBmcm9tICcuLi8uLi8uLi90eXBlcydcblxuaW1wb3J0IHsgZ2V0RGF0YUxvYWRlciB9IGZyb20gJy4uLy4uLy4uL2NvbGxlY3Rpb25zL2RhdGFsb2FkZXInXG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycydcbmltcG9ydCB7IHNldFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy9zZXRSZXF1ZXN0Q29udGV4dCdcbmltcG9ydCB7IGkxOG5Jbml0IH0gZnJvbSAnLi4vLi4vLi4vdHJhbnNsYXRpb25zL2luaXQnXG5pbXBvcnQgdXBkYXRlIGZyb20gJy4uL3VwZGF0ZSdcblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUU2x1ZyBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydnbG9iYWxzJ10+ID0ge1xuICBjb250ZXh0PzogUmVxdWVzdENvbnRleHRcbiAgZGF0YTogRGVlcFBhcnRpYWw8T21pdDxHZW5lcmF0ZWRUeXBlc1snZ2xvYmFscyddW1RTbHVnXSwgJ2lkJz4+XG4gIGRlcHRoPzogbnVtYmVyXG4gIGRyYWZ0PzogYm9vbGVhblxuICBmYWxsYmFja0xvY2FsZT86IHN0cmluZ1xuICBsb2NhbGU/OiBzdHJpbmdcbiAgb3ZlcnJpZGVBY2Nlc3M/OiBib29sZWFuXG4gIHJlcT86IFBheWxvYWRSZXF1ZXN0XG4gIHNob3dIaWRkZW5GaWVsZHM/OiBib29sZWFuXG4gIHNsdWc6IFRTbHVnXG4gIHVzZXI/OiBEb2N1bWVudFxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiB1cGRhdGVMb2NhbDxUU2x1ZyBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydnbG9iYWxzJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBPcHRpb25zPFRTbHVnPixcbik6IFByb21pc2U8R2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXVtUU2x1Z10+IHtcbiAgY29uc3Qge1xuICAgIGNvbnRleHQsXG4gICAgZGF0YSxcbiAgICBkZXB0aCxcbiAgICBkcmFmdCxcbiAgICBmYWxsYmFja0xvY2FsZTogZmFsbGJhY2tMb2NhbGVBcmcgPSBvcHRpb25zPy5yZXE/LmZhbGxiYWNrTG9jYWxlLFxuICAgIGxvY2FsZSA9IHBheWxvYWQuY29uZmlnLmxvY2FsaXphdGlvbiA/IHBheWxvYWQuY29uZmlnLmxvY2FsaXphdGlvbj8uZGVmYXVsdExvY2FsZSA6IG51bGwsXG4gICAgb3ZlcnJpZGVBY2Nlc3MgPSB0cnVlLFxuICAgIHJlcTogaW5jb21pbmdSZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICBzbHVnOiBnbG9iYWxTbHVnLFxuICAgIHVzZXIsXG4gIH0gPSBvcHRpb25zXG5cbiAgY29uc3QgZ2xvYmFsQ29uZmlnID0gcGF5bG9hZC5nbG9iYWxzLmNvbmZpZy5maW5kKChjb25maWcpID0+IGNvbmZpZy5zbHVnID09PSBnbG9iYWxTbHVnKVxuICBjb25zdCBsb2NhbGl6YXRpb25Db25maWcgPSBwYXlsb2FkPy5jb25maWc/LmxvY2FsaXphdGlvblxuICBjb25zdCBkZWZhdWx0TG9jYWxlID0gcGF5bG9hZD8uY29uZmlnPy5sb2NhbGl6YXRpb25cbiAgICA/IHBheWxvYWQ/LmNvbmZpZz8ubG9jYWxpemF0aW9uPy5kZWZhdWx0TG9jYWxlXG4gICAgOiBudWxsXG4gIGNvbnN0IGZhbGxiYWNrTG9jYWxlID0gbG9jYWxpemF0aW9uQ29uZmlnXG4gICAgPyBsb2NhbGl6YXRpb25Db25maWcubG9jYWxlcy5maW5kKCh7IGNvZGUgfSkgPT4gbG9jYWxlID09PSBjb2RlKT8uZmFsbGJhY2tMb2NhbGVcbiAgICA6IG51bGxcbiAgY29uc3QgaTE4biA9IGkxOG5Jbml0KHBheWxvYWQuY29uZmlnLmkxOG4pXG5cbiAgaWYgKCFnbG9iYWxDb25maWcpIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoYFRoZSBnbG9iYWwgd2l0aCBzbHVnICR7U3RyaW5nKGdsb2JhbFNsdWcpfSBjYW4ndCBiZSBmb3VuZC5gKVxuICB9XG5cbiAgY29uc3QgcmVxID0ge1xuICAgIGZhbGxiYWNrTG9jYWxlOlxuICAgICAgdHlwZW9mIGZhbGxiYWNrTG9jYWxlQXJnICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGZhbGxiYWNrTG9jYWxlQXJnXG4gICAgICAgIDogZmFsbGJhY2tMb2NhbGUgfHwgZGVmYXVsdExvY2FsZSxcbiAgICBpMThuLFxuICAgIGxvY2FsZSxcbiAgICBwYXlsb2FkLFxuICAgIHBheWxvYWRBUEk6ICdsb2NhbCcsXG4gICAgdDogaTE4bi50LFxuICAgIHRyYW5zYWN0aW9uSUQ6IGluY29taW5nUmVxPy50cmFuc2FjdGlvbklELFxuICAgIHVzZXIsXG4gIH0gYXMgUGF5bG9hZFJlcXVlc3RcbiAgc2V0UmVxdWVzdENvbnRleHQocmVxLCBjb250ZXh0KVxuXG4gIGlmICghcmVxLnBheWxvYWREYXRhTG9hZGVyKSByZXEucGF5bG9hZERhdGFMb2FkZXIgPSBnZXREYXRhTG9hZGVyKHJlcSlcblxuICByZXR1cm4gdXBkYXRlPFRTbHVnPih7XG4gICAgZGF0YSxcbiAgICBkZXB0aCxcbiAgICBkcmFmdCxcbiAgICBnbG9iYWxDb25maWcsXG4gICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgcmVxLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgc2x1ZzogZ2xvYmFsU2x1ZyBhcyBzdHJpbmcsXG4gIH0pXG59XG4iXSwibmFtZXMiOlsidXBkYXRlTG9jYWwiLCJwYXlsb2FkIiwib3B0aW9ucyIsImNvbnRleHQiLCJkYXRhIiwiZGVwdGgiLCJkcmFmdCIsImZhbGxiYWNrTG9jYWxlIiwiZmFsbGJhY2tMb2NhbGVBcmciLCJyZXEiLCJsb2NhbGUiLCJjb25maWciLCJsb2NhbGl6YXRpb24iLCJkZWZhdWx0TG9jYWxlIiwib3ZlcnJpZGVBY2Nlc3MiLCJpbmNvbWluZ1JlcSIsInNob3dIaWRkZW5GaWVsZHMiLCJzbHVnIiwiZ2xvYmFsU2x1ZyIsInVzZXIiLCJnbG9iYWxDb25maWciLCJnbG9iYWxzIiwiZmluZCIsImxvY2FsaXphdGlvbkNvbmZpZyIsImxvY2FsZXMiLCJjb2RlIiwiaTE4biIsImkxOG5Jbml0IiwiQVBJRXJyb3IiLCJTdHJpbmciLCJwYXlsb2FkQVBJIiwidCIsInRyYW5zYWN0aW9uSUQiLCJzZXRSZXF1ZXN0Q29udGV4dCIsInBheWxvYWREYXRhTG9hZGVyIiwiZ2V0RGF0YUxvYWRlciIsInVwZGF0ZSJdLCJtYXBwaW5ncyI6Ijs7OzsrQkEyQkE7OztlQUE4QkE7Ozs0QkFwQkE7d0JBQ0w7bUNBQ1M7c0JBQ1Q7K0RBQ047Ozs7OztBQWdCSixlQUFlQSxZQUM1QkMsT0FBZ0IsRUFDaEJDLE9BQXVCO0lBRXZCLE1BQU0sRUFDSkMsT0FBTyxFQUNQQyxJQUFJLEVBQ0pDLEtBQUssRUFDTEMsS0FBSyxFQUNMQyxnQkFBZ0JDLG9CQUFvQk4sU0FBU08sS0FBS0YsY0FBYyxFQUNoRUcsU0FBU1QsUUFBUVUsTUFBTSxDQUFDQyxZQUFZLEdBQUdYLFFBQVFVLE1BQU0sQ0FBQ0MsWUFBWSxFQUFFQyxnQkFBZ0IsSUFBSSxFQUN4RkMsaUJBQWlCLElBQUksRUFDckJMLEtBQUtNLFdBQVcsRUFDaEJDLGdCQUFnQixFQUNoQkMsTUFBTUMsVUFBVSxFQUNoQkMsSUFBSSxFQUNMLEdBQUdqQjtJQUVKLE1BQU1rQixlQUFlbkIsUUFBUW9CLE9BQU8sQ0FBQ1YsTUFBTSxDQUFDVyxJQUFJLENBQUMsQ0FBQ1gsU0FBV0EsT0FBT00sSUFBSSxLQUFLQztJQUM3RSxNQUFNSyxxQkFBcUJ0QixTQUFTVSxRQUFRQztJQUM1QyxNQUFNQyxnQkFBZ0JaLFNBQVNVLFFBQVFDLGVBQ25DWCxTQUFTVSxRQUFRQyxjQUFjQyxnQkFDL0I7SUFDSixNQUFNTixpQkFBaUJnQixxQkFDbkJBLG1CQUFtQkMsT0FBTyxDQUFDRixJQUFJLENBQUMsQ0FBQyxFQUFFRyxJQUFJLEVBQUUsR0FBS2YsV0FBV2UsT0FBT2xCLGlCQUNoRTtJQUNKLE1BQU1tQixPQUFPQyxJQUFBQSxjQUFRLEVBQUMxQixRQUFRVSxNQUFNLENBQUNlLElBQUk7SUFFekMsSUFBSSxDQUFDTixjQUFjO1FBQ2pCLE1BQU0sSUFBSVEsZ0JBQVEsQ0FBQyxDQUFDLHFCQUFxQixFQUFFQyxPQUFPWCxZQUFZLGdCQUFnQixDQUFDO0lBQ2pGO0lBRUEsTUFBTVQsTUFBTTtRQUNWRixnQkFDRSxPQUFPQyxzQkFBc0IsY0FDekJBLG9CQUNBRCxrQkFBa0JNO1FBQ3hCYTtRQUNBaEI7UUFDQVQ7UUFDQTZCLFlBQVk7UUFDWkMsR0FBR0wsS0FBS0ssQ0FBQztRQUNUQyxlQUFlakIsYUFBYWlCO1FBQzVCYjtJQUNGO0lBQ0FjLElBQUFBLG9DQUFpQixFQUFDeEIsS0FBS047SUFFdkIsSUFBSSxDQUFDTSxJQUFJeUIsaUJBQWlCLEVBQUV6QixJQUFJeUIsaUJBQWlCLEdBQUdDLElBQUFBLHlCQUFhLEVBQUMxQjtJQUVsRSxPQUFPMkIsSUFBQUEsZUFBTSxFQUFRO1FBQ25CaEM7UUFDQUM7UUFDQUM7UUFDQWM7UUFDQU47UUFDQUw7UUFDQU87UUFDQUMsTUFBTUM7SUFDUjtBQUNGIn0=