"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return findVersionByIDLocal;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _findVersionByID = /*#__PURE__*/ _interop_require_default(require("../findVersionByID"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findVersionByIDLocal(payload, options) {
    const { id, context, depth, disableErrors = false, fallbackLocale: fallbackLocaleArg = options?.req?.fallbackLocale, locale = payload.config.localization ? payload.config.localization?.defaultLocale : null, overrideAccess = true, req: incomingReq, showHiddenFields, slug: globalSlug, user } = options;
    const globalConfig = payload.globals.config.find((config)=>config.slug === globalSlug);
    const localizationConfig = payload?.config?.localization;
    const defaultLocale = payload?.config?.localization ? payload?.config?.localization?.defaultLocale : null;
    const fallbackLocale = localizationConfig ? localizationConfig.locales.find(({ code })=>locale === code)?.fallbackLocale : null;
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!globalConfig) {
        throw new _errors.APIError(`The global with slug ${String(globalSlug)} can't be found.`);
    }
    const req = {
        fallbackLocale: typeof fallbackLocaleArg !== 'undefined' ? fallbackLocaleArg : fallbackLocale || defaultLocale,
        i18n,
        locale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req, context);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _findVersionByID.default)({
        id,
        depth,
        disableErrors,
        globalConfig,
        overrideAccess,
        req,
        showHiddenFields
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9nbG9iYWxzL29wZXJhdGlvbnMvbG9jYWwvZmluZFZlcnNpb25CeUlELnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgR2VuZXJhdGVkVHlwZXMsIFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3MvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWQgfSBmcm9tICcuLi8uLi8uLi9wYXlsb2FkJ1xuaW1wb3J0IHR5cGUgeyBEb2N1bWVudCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBUeXBlV2l0aFZlcnNpb24gfSBmcm9tICcuLi8uLi8uLi92ZXJzaW9ucy90eXBlcydcblxuaW1wb3J0IHsgZ2V0RGF0YUxvYWRlciB9IGZyb20gJy4uLy4uLy4uL2NvbGxlY3Rpb25zL2RhdGFsb2FkZXInXG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycydcbmltcG9ydCB7IHNldFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy9zZXRSZXF1ZXN0Q29udGV4dCdcbmltcG9ydCB7IGkxOG5Jbml0IH0gZnJvbSAnLi4vLi4vLi4vdHJhbnNsYXRpb25zL2luaXQnXG5pbXBvcnQgZmluZFZlcnNpb25CeUlEIGZyb20gJy4uL2ZpbmRWZXJzaW9uQnlJRCdcblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXT4gPSB7XG4gIGNvbnRleHQ/OiBSZXF1ZXN0Q29udGV4dFxuICBkZXB0aD86IG51bWJlclxuICBkaXNhYmxlRXJyb3JzPzogYm9vbGVhblxuICBmYWxsYmFja0xvY2FsZT86IHN0cmluZ1xuICBpZDogc3RyaW5nXG4gIGxvY2FsZT86IHN0cmluZ1xuICBvdmVycmlkZUFjY2Vzcz86IGJvb2xlYW5cbiAgcmVxPzogUGF5bG9hZFJlcXVlc3RcbiAgc2hvd0hpZGRlbkZpZWxkcz86IGJvb2xlYW5cbiAgc2x1ZzogVFxuICB1c2VyPzogRG9jdW1lbnRcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZmluZFZlcnNpb25CeUlETG9jYWw8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydnbG9iYWxzJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBPcHRpb25zPFQ+LFxuKTogUHJvbWlzZTxUeXBlV2l0aFZlcnNpb248R2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXVtUXT4+IHtcbiAgY29uc3Qge1xuICAgIGlkLFxuICAgIGNvbnRleHQsXG4gICAgZGVwdGgsXG4gICAgZGlzYWJsZUVycm9ycyA9IGZhbHNlLFxuICAgIGZhbGxiYWNrTG9jYWxlOiBmYWxsYmFja0xvY2FsZUFyZyA9IG9wdGlvbnM/LnJlcT8uZmFsbGJhY2tMb2NhbGUsXG4gICAgbG9jYWxlID0gcGF5bG9hZC5jb25maWcubG9jYWxpemF0aW9uID8gcGF5bG9hZC5jb25maWcubG9jYWxpemF0aW9uPy5kZWZhdWx0TG9jYWxlIDogbnVsbCxcbiAgICBvdmVycmlkZUFjY2VzcyA9IHRydWUsXG4gICAgcmVxOiBpbmNvbWluZ1JlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgIHNsdWc6IGdsb2JhbFNsdWcsXG4gICAgdXNlcixcbiAgfSA9IG9wdGlvbnNcblxuICBjb25zdCBnbG9iYWxDb25maWcgPSBwYXlsb2FkLmdsb2JhbHMuY29uZmlnLmZpbmQoKGNvbmZpZykgPT4gY29uZmlnLnNsdWcgPT09IGdsb2JhbFNsdWcpXG4gIGNvbnN0IGxvY2FsaXphdGlvbkNvbmZpZyA9IHBheWxvYWQ/LmNvbmZpZz8ubG9jYWxpemF0aW9uXG4gIGNvbnN0IGRlZmF1bHRMb2NhbGUgPSBwYXlsb2FkPy5jb25maWc/LmxvY2FsaXphdGlvblxuICAgID8gcGF5bG9hZD8uY29uZmlnPy5sb2NhbGl6YXRpb24/LmRlZmF1bHRMb2NhbGVcbiAgICA6IG51bGxcbiAgY29uc3QgZmFsbGJhY2tMb2NhbGUgPSBsb2NhbGl6YXRpb25Db25maWdcbiAgICA/IGxvY2FsaXphdGlvbkNvbmZpZy5sb2NhbGVzLmZpbmQoKHsgY29kZSB9KSA9PiBsb2NhbGUgPT09IGNvZGUpPy5mYWxsYmFja0xvY2FsZVxuICAgIDogbnVsbFxuICBjb25zdCBpMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcblxuICBpZiAoIWdsb2JhbENvbmZpZykge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihgVGhlIGdsb2JhbCB3aXRoIHNsdWcgJHtTdHJpbmcoZ2xvYmFsU2x1Zyl9IGNhbid0IGJlIGZvdW5kLmApXG4gIH1cblxuICBjb25zdCByZXEgPSB7XG4gICAgZmFsbGJhY2tMb2NhbGU6XG4gICAgICB0eXBlb2YgZmFsbGJhY2tMb2NhbGVBcmcgIT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gZmFsbGJhY2tMb2NhbGVBcmdcbiAgICAgICAgOiBmYWxsYmFja0xvY2FsZSB8fCBkZWZhdWx0TG9jYWxlLFxuICAgIGkxOG4sXG4gICAgbG9jYWxlLFxuICAgIHBheWxvYWQsXG4gICAgcGF5bG9hZEFQSTogJ2xvY2FsJyxcbiAgICB0OiBpMThuLnQsXG4gICAgdHJhbnNhY3Rpb25JRDogaW5jb21pbmdSZXE/LnRyYW5zYWN0aW9uSUQsXG4gICAgdXNlcixcbiAgfSBhcyBQYXlsb2FkUmVxdWVzdFxuICBzZXRSZXF1ZXN0Q29udGV4dChyZXEsIGNvbnRleHQpXG5cbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIHJldHVybiBmaW5kVmVyc2lvbkJ5SUQoe1xuICAgIGlkLFxuICAgIGRlcHRoLFxuICAgIGRpc2FibGVFcnJvcnMsXG4gICAgZ2xvYmFsQ29uZmlnLFxuICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgIHJlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICB9KVxufVxuIl0sIm5hbWVzIjpbImZpbmRWZXJzaW9uQnlJRExvY2FsIiwicGF5bG9hZCIsIm9wdGlvbnMiLCJpZCIsImNvbnRleHQiLCJkZXB0aCIsImRpc2FibGVFcnJvcnMiLCJmYWxsYmFja0xvY2FsZSIsImZhbGxiYWNrTG9jYWxlQXJnIiwicmVxIiwibG9jYWxlIiwiY29uZmlnIiwibG9jYWxpemF0aW9uIiwiZGVmYXVsdExvY2FsZSIsIm92ZXJyaWRlQWNjZXNzIiwiaW5jb21pbmdSZXEiLCJzaG93SGlkZGVuRmllbGRzIiwic2x1ZyIsImdsb2JhbFNsdWciLCJ1c2VyIiwiZ2xvYmFsQ29uZmlnIiwiZ2xvYmFscyIsImZpbmQiLCJsb2NhbGl6YXRpb25Db25maWciLCJsb2NhbGVzIiwiY29kZSIsImkxOG4iLCJpMThuSW5pdCIsIkFQSUVycm9yIiwiU3RyaW5nIiwicGF5bG9hZEFQSSIsInQiLCJ0cmFuc2FjdGlvbklEIiwic2V0UmVxdWVzdENvbnRleHQiLCJwYXlsb2FkRGF0YUxvYWRlciIsImdldERhdGFMb2FkZXIiLCJmaW5kVmVyc2lvbkJ5SUQiXSwibWFwcGluZ3MiOiI7Ozs7K0JBMEJBOzs7ZUFBOEJBOzs7NEJBcEJBO3dCQUNMO21DQUNTO3NCQUNUO3dFQUNHOzs7Ozs7QUFnQmIsZUFBZUEscUJBQzVCQyxPQUFnQixFQUNoQkMsT0FBbUI7SUFFbkIsTUFBTSxFQUNKQyxFQUFFLEVBQ0ZDLE9BQU8sRUFDUEMsS0FBSyxFQUNMQyxnQkFBZ0IsS0FBSyxFQUNyQkMsZ0JBQWdCQyxvQkFBb0JOLFNBQVNPLEtBQUtGLGNBQWMsRUFDaEVHLFNBQVNULFFBQVFVLE1BQU0sQ0FBQ0MsWUFBWSxHQUFHWCxRQUFRVSxNQUFNLENBQUNDLFlBQVksRUFBRUMsZ0JBQWdCLElBQUksRUFDeEZDLGlCQUFpQixJQUFJLEVBQ3JCTCxLQUFLTSxXQUFXLEVBQ2hCQyxnQkFBZ0IsRUFDaEJDLE1BQU1DLFVBQVUsRUFDaEJDLElBQUksRUFDTCxHQUFHakI7SUFFSixNQUFNa0IsZUFBZW5CLFFBQVFvQixPQUFPLENBQUNWLE1BQU0sQ0FBQ1csSUFBSSxDQUFDLENBQUNYLFNBQVdBLE9BQU9NLElBQUksS0FBS0M7SUFDN0UsTUFBTUsscUJBQXFCdEIsU0FBU1UsUUFBUUM7SUFDNUMsTUFBTUMsZ0JBQWdCWixTQUFTVSxRQUFRQyxlQUNuQ1gsU0FBU1UsUUFBUUMsY0FBY0MsZ0JBQy9CO0lBQ0osTUFBTU4saUJBQWlCZ0IscUJBQ25CQSxtQkFBbUJDLE9BQU8sQ0FBQ0YsSUFBSSxDQUFDLENBQUMsRUFBRUcsSUFBSSxFQUFFLEdBQUtmLFdBQVdlLE9BQU9sQixpQkFDaEU7SUFDSixNQUFNbUIsT0FBT0MsSUFBQUEsY0FBUSxFQUFDMUIsUUFBUVUsTUFBTSxDQUFDZSxJQUFJO0lBRXpDLElBQUksQ0FBQ04sY0FBYztRQUNqQixNQUFNLElBQUlRLGdCQUFRLENBQUMsQ0FBQyxxQkFBcUIsRUFBRUMsT0FBT1gsWUFBWSxnQkFBZ0IsQ0FBQztJQUNqRjtJQUVBLE1BQU1ULE1BQU07UUFDVkYsZ0JBQ0UsT0FBT0Msc0JBQXNCLGNBQ3pCQSxvQkFDQUQsa0JBQWtCTTtRQUN4QmE7UUFDQWhCO1FBQ0FUO1FBQ0E2QixZQUFZO1FBQ1pDLEdBQUdMLEtBQUtLLENBQUM7UUFDVEMsZUFBZWpCLGFBQWFpQjtRQUM1QmI7SUFDRjtJQUNBYyxJQUFBQSxvQ0FBaUIsRUFBQ3hCLEtBQUtMO0lBRXZCLElBQUksQ0FBQ0ssSUFBSXlCLGlCQUFpQixFQUFFekIsSUFBSXlCLGlCQUFpQixHQUFHQyxJQUFBQSx5QkFBYSxFQUFDMUI7SUFFbEUsT0FBTzJCLElBQUFBLHdCQUFlLEVBQUM7UUFDckJqQztRQUNBRTtRQUNBQztRQUNBYztRQUNBTjtRQUNBTDtRQUNBTztJQUNGO0FBQ0YifQ==