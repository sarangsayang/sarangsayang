"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ListDrawerContent", {
    enumerable: true,
    get: function() {
        return ListDrawerContent;
    }
});
const _modal = require("@faceless-ui/modal");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _ = require(".");
const _getTranslation = require("../../../../utilities/getTranslation");
const _usePayloadAPI = /*#__PURE__*/ _interop_require_default(require("../../../hooks/usePayloadAPI"));
const _useUseAsTitle = require("../../../hooks/useUseAsTitle");
const _Label = /*#__PURE__*/ _interop_require_default(require("../../forms/Label"));
const _X = /*#__PURE__*/ _interop_require_default(require("../../icons/X"));
const _Auth = require("../../utilities/Auth");
const _Config = require("../../utilities/Config");
const _DocumentInfo = require("../../utilities/DocumentInfo");
const _Preferences = require("../../utilities/Preferences");
const _RenderCustomComponent = /*#__PURE__*/ _interop_require_default(require("../../utilities/RenderCustomComponent"));
const _Default = /*#__PURE__*/ _interop_require_default(require("../../views/collections/List/Default"));
const _formatFields = /*#__PURE__*/ _interop_require_default(require("../../views/collections/List/formatFields"));
const _DocumentDrawer = require("../DocumentDrawer");
const _Pill = /*#__PURE__*/ _interop_require_default(require("../Pill"));
const _ReactSelect = /*#__PURE__*/ _interop_require_default(require("../ReactSelect"));
const _TableColumns = require("../TableColumns");
const _ViewDescription = /*#__PURE__*/ _interop_require_default(require("../ViewDescription"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const hoistQueryParamsToAnd = (where, queryParams)=>{
    if ('and' in where) {
        where.and.push(queryParams);
    } else if ('or' in where) {
        where = {
            and: [
                where,
                queryParams
            ]
        };
    } else {
        where = {
            and: [
                where,
                queryParams
            ]
        };
    }
    return where;
};
const ListDrawerContent = ({ collectionSlugs, customHeader, drawerSlug, filterOptions, onSelect, selectedCollection })=>{
    const { i18n, t } = (0, _reacti18next.useTranslation)([
        'upload',
        'general'
    ]);
    const { permissions } = (0, _Auth.useAuth)();
    const { setPreference } = (0, _Preferences.usePreferences)();
    const { closeModal, isModalOpen } = (0, _modal.useModal)();
    const [limit, setLimit] = (0, _react.useState)();
    const [sort, setSort] = (0, _react.useState)(null);
    const [page, setPage] = (0, _react.useState)(1);
    const [where, setWhere] = (0, _react.useState)(null);
    const [search, setSearch] = (0, _react.useState)('');
    const { collections, routes: { api }, serverURL } = (0, _Config.useConfig)();
    const enabledCollectionConfigs = collections.filter(({ slug })=>{
        return collectionSlugs.includes(slug);
    });
    const [selectedCollectionConfig, setSelectedCollectionConfig] = (0, _react.useState)(()=>{
        return enabledCollectionConfigs.find(({ slug })=>slug === selectedCollection) || enabledCollectionConfigs?.[0];
    });
    const [selectedOption, setSelectedOption] = (0, _react.useState)(()=>selectedCollectionConfig ? {
            label: (0, _getTranslation.getTranslation)(selectedCollectionConfig.labels.singular, i18n),
            value: selectedCollectionConfig.slug
        } : undefined);
    const [fields, setFields] = (0, _react.useState)(()=>(0, _formatFields.default)(selectedCollectionConfig));
    const titleField = (0, _useUseAsTitle.useUseTitleField)(selectedCollectionConfig);
    (0, _react.useEffect)(()=>{
        setFields((0, _formatFields.default)(selectedCollectionConfig));
    }, [
        selectedCollectionConfig
    ]);
    // allow external control of selected collection, same as the initial state logic above
    (0, _react.useEffect)(()=>{
        if (selectedCollection) {
            // if passed a selection, find it and check if it's enabled
            const selectedConfig = enabledCollectionConfigs.find(({ slug })=>slug === selectedCollection) || enabledCollectionConfigs?.[0];
            setSelectedCollectionConfig(selectedConfig);
        }
    }, [
        selectedCollection,
        enabledCollectionConfigs,
        onSelect,
        t
    ]);
    const preferenceKey = `${selectedCollectionConfig.slug}-list`;
    // this is the 'create new' drawer
    const [DocumentDrawer, DocumentDrawerToggler, { drawerSlug: documentDrawerSlug }] = (0, _DocumentDrawer.useDocumentDrawer)({
        collectionSlug: selectedCollectionConfig.slug
    });
    (0, _react.useEffect)(()=>{
        if (selectedOption) {
            setSelectedCollectionConfig(enabledCollectionConfigs.find(({ slug })=>selectedOption.value === slug));
        }
    }, [
        selectedOption,
        enabledCollectionConfigs
    ]);
    const collectionPermissions = permissions?.collections?.[selectedCollectionConfig?.slug];
    const hasCreatePermission = collectionPermissions?.create?.permission;
    // If modal is open, get active page of upload gallery
    const isOpen = isModalOpen(drawerSlug);
    const apiURL = isOpen ? `${serverURL}${api}/${selectedCollectionConfig.slug}` : null;
    const [cacheBust, dispatchCacheBust] = (0, _react.useReducer)((state)=>state + 1, 0) // used to force a re-fetch even when apiURL is unchanged
    ;
    const [{ data, isError }, { setParams }] = (0, _usePayloadAPI.default)(apiURL, {});
    const moreThanOneAvailableCollection = enabledCollectionConfigs.length > 1;
    (0, _react.useEffect)(()=>{
        const { slug, admin: { listSearchableFields } = {}, versions } = selectedCollectionConfig;
        const params = {};
        let copyOfWhere = {
            ...where || {}
        };
        const filterOption = filterOptions?.[slug];
        if (filterOptions && typeof filterOption !== 'boolean') {
            copyOfWhere = hoistQueryParamsToAnd(copyOfWhere, filterOption);
        }
        if (search) {
            const searchAsConditions = (listSearchableFields || [
                titleField?.name
            ]).map((fieldName)=>{
                return {
                    [fieldName]: {
                        like: search
                    }
                };
            }, []);
            if (searchAsConditions.length > 0) {
                const searchFilter = {
                    or: [
                        ...searchAsConditions
                    ]
                };
                copyOfWhere = hoistQueryParamsToAnd(copyOfWhere, searchFilter);
            }
        }
        if (page) params.page = page;
        if (sort) params.sort = sort;
        if (cacheBust) params.cacheBust = cacheBust;
        if (copyOfWhere) params.where = copyOfWhere;
        if (versions?.drafts) params.draft = 'true';
        setParams(params);
    }, [
        page,
        sort,
        where,
        search,
        cacheBust,
        filterOptions,
        selectedCollectionConfig,
        t,
        setParams,
        titleField?.name
    ]);
    (0, _react.useEffect)(()=>{
        const newPreferences = {
            limit,
            sort
        };
        setPreference(preferenceKey, newPreferences, true);
    }, [
        sort,
        limit,
        setPreference,
        preferenceKey
    ]);
    const onCreateNew = (0, _react.useCallback)(({ doc })=>{
        if (typeof onSelect === 'function') {
            onSelect({
                collectionConfig: selectedCollectionConfig,
                docID: doc.id
            });
        }
        dispatchCacheBust();
        closeModal(documentDrawerSlug);
        closeModal(drawerSlug);
    }, [
        closeModal,
        documentDrawerSlug,
        drawerSlug,
        onSelect,
        selectedCollectionConfig
    ]);
    if (!selectedCollectionConfig || isError) {
        return null;
    }
    const listComponent = selectedCollectionConfig?.admin?.components?.views?.List;
    let ListToRender = null;
    if (listComponent && typeof listComponent === 'function') {
        ListToRender = listComponent;
    } else if (typeof listComponent === 'object' && typeof listComponent.Component === 'function') {
        ListToRender = listComponent.Component;
    }
    return /*#__PURE__*/ _react.default.createElement(_TableColumns.TableColumnsProvider, {
        cellProps: [
            {
                className: `${_.baseClass}__first-cell`,
                link: false,
                onClick: ({ collection: rowColl, rowData })=>{
                    if (typeof onSelect === 'function') {
                        onSelect({
                            collectionConfig: rowColl,
                            docID: rowData.id
                        });
                    }
                }
            }
        ],
        collection: selectedCollectionConfig
    }, /*#__PURE__*/ _react.default.createElement(_DocumentInfo.DocumentInfoProvider, {
        collection: selectedCollectionConfig
    }, /*#__PURE__*/ _react.default.createElement(_RenderCustomComponent.default, {
        CustomComponent: ListToRender,
        DefaultComponent: _Default.default,
        componentProps: {
            collection: {
                ...selectedCollectionConfig,
                fields
            },
            customHeader: /*#__PURE__*/ _react.default.createElement("header", {
                className: `${_.baseClass}__header`
            }, /*#__PURE__*/ _react.default.createElement("div", {
                className: `${_.baseClass}__header-wrap`
            }, /*#__PURE__*/ _react.default.createElement("div", {
                className: `${_.baseClass}__header-content`
            }, /*#__PURE__*/ _react.default.createElement("h2", {
                className: `${_.baseClass}__header-text`
            }, !customHeader ? (0, _getTranslation.getTranslation)(selectedCollectionConfig?.labels?.plural, i18n) : customHeader), hasCreatePermission && /*#__PURE__*/ _react.default.createElement(DocumentDrawerToggler, {
                className: `${_.baseClass}__create-new-button`
            }, /*#__PURE__*/ _react.default.createElement(_Pill.default, null, t('general:createNew')))), /*#__PURE__*/ _react.default.createElement("button", {
                className: `${_.baseClass}__header-close`,
                onClick: ()=>{
                    closeModal(drawerSlug);
                },
                type: "button"
            }, /*#__PURE__*/ _react.default.createElement(_X.default, null))), selectedCollectionConfig?.admin?.description && /*#__PURE__*/ _react.default.createElement("div", {
                className: `${_.baseClass}__sub-header`
            }, /*#__PURE__*/ _react.default.createElement(_ViewDescription.default, {
                description: selectedCollectionConfig.admin.description
            })), moreThanOneAvailableCollection && /*#__PURE__*/ _react.default.createElement("div", {
                className: `${_.baseClass}__select-collection-wrap`
            }, /*#__PURE__*/ _react.default.createElement(_Label.default, {
                label: t('selectCollectionToBrowse')
            }), /*#__PURE__*/ _react.default.createElement(_ReactSelect.default, {
                className: `${_.baseClass}__select-collection`,
                onChange: setSelectedOption,
                options: enabledCollectionConfigs.map((coll)=>({
                        label: (0, _getTranslation.getTranslation)(coll.labels.singular, i18n),
                        value: coll.slug
                    })),
                value: selectedOption
            }))),
            data,
            handlePageChange: setPage,
            handlePerPageChange: setLimit,
            handleSearchChange: setSearch,
            handleSortChange: setSort,
            handleWhereChange: setWhere,
            hasCreatePermission,
            limit: limit || selectedCollectionConfig?.admin?.pagination?.defaultLimit,
            modifySearchParams: false,
            newDocumentURL: null,
            setLimit,
            setSort,
            titleField
        }
    })), /*#__PURE__*/ _react.default.createElement(DocumentDrawer, {
        onSave: onCreateNew
    }));
};

//# sourceMappingURL=data:application/json;base64,