"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _validations = require("../../../../../fields/validations");
const _CodeEditor = require("../../../elements/CodeEditor");
const _Error = /*#__PURE__*/ _interop_require_default(require("../../Error"));
const _FieldDescription = /*#__PURE__*/ _interop_require_default(require("../../FieldDescription"));
const _Label = /*#__PURE__*/ _interop_require_default(require("../../Label"));
const _useField = /*#__PURE__*/ _interop_require_default(require("../../useField"));
const _withCondition = /*#__PURE__*/ _interop_require_default(require("../../withCondition"));
const _shared = require("../shared");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'json-field';
const JSONField = (props)=>{
    const { name, admin: { className, components: { Error, Label } = {}, condition, description, editorOptions, readOnly, style, width } = {}, label, path: pathFromProps, required, validate = _validations.json } = props;
    const ErrorComp = Error || _Error.default;
    const LabelComp = Label || _Label.default;
    const path = pathFromProps || name;
    const [stringValue, setStringValue] = (0, _react.useState)();
    const [jsonError, setJsonError] = (0, _react.useState)();
    const [hasLoadedValue, setHasLoadedValue] = (0, _react.useState)(false);
    const memoizedValidate = (0, _react.useCallback)((value, options)=>{
        return validate(value, {
            ...options,
            jsonError,
            required
        });
    }, [
        validate,
        required,
        jsonError
    ]);
    const { errorMessage, initialValue, setValue, showError, value } = (0, _useField.default)({
        condition,
        path,
        validate: memoizedValidate
    });
    const handleChange = (0, _react.useCallback)((val)=>{
        try {
            if (readOnly) return;
            setStringValue(val);
            setValue(val ? JSON.parse(val) : '');
            setJsonError(undefined);
        } catch (e) {
            setJsonError(e);
        }
    }, [
        readOnly,
        setValue,
        setStringValue
    ]);
    (0, _react.useEffect)(()=>{
        try {
            const hasValue = value && value.toString().length > 0;
            if (hasLoadedValue) {
                setStringValue(hasValue ? JSON.stringify(value, null, 2) : '');
            } else {
                setStringValue(JSON.stringify(hasValue ? value : initialValue, null, 2));
                setHasLoadedValue(true);
            }
        } catch (e) {
            setJsonError(e);
        }
    }, [
        initialValue,
        value,
        hasLoadedValue
    ]);
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            baseClass,
            className,
            showError && 'error',
            readOnly && 'read-only'
        ].filter(Boolean).join(' '),
        style: {
            ...style,
            width
        }
    }, /*#__PURE__*/ _react.default.createElement(ErrorComp, {
        message: errorMessage,
        showError: showError
    }), /*#__PURE__*/ _react.default.createElement(LabelComp, {
        htmlFor: `field-${path}`,
        label: label,
        required: required
    }), /*#__PURE__*/ _react.default.createElement(_CodeEditor.CodeEditor, {
        defaultLanguage: "json",
        onChange: handleChange,
        options: editorOptions,
        readOnly: readOnly,
        value: stringValue
    }), /*#__PURE__*/ _react.default.createElement(_FieldDescription.default, {
        description: description,
        path: path,
        value: value
    }));
};
const _default = (0, _withCondition.default)(JSONField);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL2ZpZWxkLXR5cGVzL0pTT04vaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgdHlwZSB7IFByb3BzIH0gZnJvbSAnLi90eXBlcydcblxuaW1wb3J0IHsganNvbiB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2ZpZWxkcy92YWxpZGF0aW9ucydcbmltcG9ydCB7IENvZGVFZGl0b3IgfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50cy9Db2RlRWRpdG9yJ1xuaW1wb3J0IERlZmF1bHRFcnJvciBmcm9tICcuLi8uLi9FcnJvcidcbmltcG9ydCBGaWVsZERlc2NyaXB0aW9uIGZyb20gJy4uLy4uL0ZpZWxkRGVzY3JpcHRpb24nXG5pbXBvcnQgRGVmYXVsdExhYmVsIGZyb20gJy4uLy4uL0xhYmVsJ1xuaW1wb3J0IHVzZUZpZWxkIGZyb20gJy4uLy4uL3VzZUZpZWxkJ1xuaW1wb3J0IHdpdGhDb25kaXRpb24gZnJvbSAnLi4vLi4vd2l0aENvbmRpdGlvbidcbmltcG9ydCB7IGZpZWxkQmFzZUNsYXNzIH0gZnJvbSAnLi4vc2hhcmVkJ1xuaW1wb3J0ICcuL2luZGV4LnNjc3MnXG5cbmNvbnN0IGJhc2VDbGFzcyA9ICdqc29uLWZpZWxkJ1xuXG5jb25zdCBKU09ORmllbGQ6IFJlYWN0LkZDPFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgbmFtZSxcbiAgICBhZG1pbjoge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50czogeyBFcnJvciwgTGFiZWwgfSA9IHt9LFxuICAgICAgY29uZGl0aW9uLFxuICAgICAgZGVzY3JpcHRpb24sXG4gICAgICBlZGl0b3JPcHRpb25zLFxuICAgICAgcmVhZE9ubHksXG4gICAgICBzdHlsZSxcbiAgICAgIHdpZHRoLFxuICAgIH0gPSB7fSxcbiAgICBsYWJlbCxcbiAgICBwYXRoOiBwYXRoRnJvbVByb3BzLFxuICAgIHJlcXVpcmVkLFxuICAgIHZhbGlkYXRlID0ganNvbixcbiAgfSA9IHByb3BzXG5cbiAgY29uc3QgRXJyb3JDb21wID0gRXJyb3IgfHwgRGVmYXVsdEVycm9yXG4gIGNvbnN0IExhYmVsQ29tcCA9IExhYmVsIHx8IERlZmF1bHRMYWJlbFxuXG4gIGNvbnN0IHBhdGggPSBwYXRoRnJvbVByb3BzIHx8IG5hbWVcbiAgY29uc3QgW3N0cmluZ1ZhbHVlLCBzZXRTdHJpbmdWYWx1ZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KClcbiAgY29uc3QgW2pzb25FcnJvciwgc2V0SnNvbkVycm9yXSA9IHVzZVN0YXRlPHN0cmluZz4oKVxuICBjb25zdCBbaGFzTG9hZGVkVmFsdWUsIHNldEhhc0xvYWRlZFZhbHVlXSA9IHVzZVN0YXRlKGZhbHNlKVxuXG4gIGNvbnN0IG1lbW9pemVkVmFsaWRhdGUgPSB1c2VDYWxsYmFjayhcbiAgICAodmFsdWUsIG9wdGlvbnMpID0+IHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZSh2YWx1ZSwgeyAuLi5vcHRpb25zLCBqc29uRXJyb3IsIHJlcXVpcmVkIH0pXG4gICAgfSxcbiAgICBbdmFsaWRhdGUsIHJlcXVpcmVkLCBqc29uRXJyb3JdLFxuICApXG5cbiAgY29uc3QgeyBlcnJvck1lc3NhZ2UsIGluaXRpYWxWYWx1ZSwgc2V0VmFsdWUsIHNob3dFcnJvciwgdmFsdWUgfSA9IHVzZUZpZWxkPHN0cmluZz4oe1xuICAgIGNvbmRpdGlvbixcbiAgICBwYXRoLFxuICAgIHZhbGlkYXRlOiBtZW1vaXplZFZhbGlkYXRlLFxuICB9KVxuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IHVzZUNhbGxiYWNrKFxuICAgICh2YWwpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChyZWFkT25seSkgcmV0dXJuXG4gICAgICAgIHNldFN0cmluZ1ZhbHVlKHZhbClcblxuICAgICAgICBzZXRWYWx1ZSh2YWwgPyBKU09OLnBhcnNlKHZhbCkgOiAnJylcbiAgICAgICAgc2V0SnNvbkVycm9yKHVuZGVmaW5lZClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgc2V0SnNvbkVycm9yKGUpXG4gICAgICB9XG4gICAgfSxcbiAgICBbcmVhZE9ubHksIHNldFZhbHVlLCBzZXRTdHJpbmdWYWx1ZV0sXG4gIClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBoYXNWYWx1ZSA9IHZhbHVlICYmIHZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoID4gMFxuICAgICAgaWYgKGhhc0xvYWRlZFZhbHVlKSB7XG4gICAgICAgIHNldFN0cmluZ1ZhbHVlKGhhc1ZhbHVlID8gSlNPTi5zdHJpbmdpZnkodmFsdWUsIG51bGwsIDIpIDogJycpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRTdHJpbmdWYWx1ZShKU09OLnN0cmluZ2lmeShoYXNWYWx1ZSA/IHZhbHVlIDogaW5pdGlhbFZhbHVlLCBudWxsLCAyKSlcbiAgICAgICAgc2V0SGFzTG9hZGVkVmFsdWUodHJ1ZSlcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBzZXRKc29uRXJyb3IoZSlcbiAgICB9XG4gIH0sIFtpbml0aWFsVmFsdWUsIHZhbHVlLCBoYXNMb2FkZWRWYWx1ZV0pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e1tcbiAgICAgICAgZmllbGRCYXNlQ2xhc3MsXG4gICAgICAgIGJhc2VDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBzaG93RXJyb3IgJiYgJ2Vycm9yJyxcbiAgICAgICAgcmVhZE9ubHkgJiYgJ3JlYWQtb25seScsXG4gICAgICBdXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgLmpvaW4oJyAnKX1cbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIC4uLnN0eWxlLFxuICAgICAgICB3aWR0aCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPEVycm9yQ29tcCBtZXNzYWdlPXtlcnJvck1lc3NhZ2V9IHNob3dFcnJvcj17c2hvd0Vycm9yfSAvPlxuICAgICAgPExhYmVsQ29tcCBodG1sRm9yPXtgZmllbGQtJHtwYXRofWB9IGxhYmVsPXtsYWJlbH0gcmVxdWlyZWQ9e3JlcXVpcmVkfSAvPlxuICAgICAgPENvZGVFZGl0b3JcbiAgICAgICAgZGVmYXVsdExhbmd1YWdlPVwianNvblwiXG4gICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgIG9wdGlvbnM9e2VkaXRvck9wdGlvbnN9XG4gICAgICAgIHJlYWRPbmx5PXtyZWFkT25seX1cbiAgICAgICAgdmFsdWU9e3N0cmluZ1ZhbHVlfVxuICAgICAgLz5cbiAgICAgIDxGaWVsZERlc2NyaXB0aW9uIGRlc2NyaXB0aW9uPXtkZXNjcmlwdGlvbn0gcGF0aD17cGF0aH0gdmFsdWU9e3ZhbHVlfSAvPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhDb25kaXRpb24oSlNPTkZpZWxkKVxuIl0sIm5hbWVzIjpbImJhc2VDbGFzcyIsIkpTT05GaWVsZCIsInByb3BzIiwibmFtZSIsImFkbWluIiwiY2xhc3NOYW1lIiwiY29tcG9uZW50cyIsIkVycm9yIiwiTGFiZWwiLCJjb25kaXRpb24iLCJkZXNjcmlwdGlvbiIsImVkaXRvck9wdGlvbnMiLCJyZWFkT25seSIsInN0eWxlIiwid2lkdGgiLCJsYWJlbCIsInBhdGgiLCJwYXRoRnJvbVByb3BzIiwicmVxdWlyZWQiLCJ2YWxpZGF0ZSIsImpzb24iLCJFcnJvckNvbXAiLCJEZWZhdWx0RXJyb3IiLCJMYWJlbENvbXAiLCJEZWZhdWx0TGFiZWwiLCJzdHJpbmdWYWx1ZSIsInNldFN0cmluZ1ZhbHVlIiwidXNlU3RhdGUiLCJqc29uRXJyb3IiLCJzZXRKc29uRXJyb3IiLCJoYXNMb2FkZWRWYWx1ZSIsInNldEhhc0xvYWRlZFZhbHVlIiwibWVtb2l6ZWRWYWxpZGF0ZSIsInVzZUNhbGxiYWNrIiwidmFsdWUiLCJvcHRpb25zIiwiZXJyb3JNZXNzYWdlIiwiaW5pdGlhbFZhbHVlIiwic2V0VmFsdWUiLCJzaG93RXJyb3IiLCJ1c2VGaWVsZCIsImhhbmRsZUNoYW5nZSIsInZhbCIsIkpTT04iLCJwYXJzZSIsInVuZGVmaW5lZCIsImUiLCJ1c2VFZmZlY3QiLCJoYXNWYWx1ZSIsInRvU3RyaW5nIiwibGVuZ3RoIiwic3RyaW5naWZ5IiwiZGl2IiwiZmllbGRCYXNlQ2xhc3MiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsIm1lc3NhZ2UiLCJodG1sRm9yIiwiQ29kZUVkaXRvciIsImRlZmF1bHRMYW5ndWFnZSIsIm9uQ2hhbmdlIiwiRmllbGREZXNjcmlwdGlvbiIsIndpdGhDb25kaXRpb24iXSwibWFwcGluZ3MiOiI7Ozs7K0JBbUhBOzs7ZUFBQTs7OytEQW5Id0Q7NkJBSW5DOzRCQUNNOzhEQUNGO3lFQUNJOzhEQUNKO2lFQUNKO3NFQUNLO3dCQUNLO1FBQ3hCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFUCxNQUFNQSxZQUFZO0FBRWxCLE1BQU1DLFlBQTZCLENBQUNDO0lBQ2xDLE1BQU0sRUFDSkMsSUFBSSxFQUNKQyxPQUFPLEVBQ0xDLFNBQVMsRUFDVEMsWUFBWSxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUNqQ0MsU0FBUyxFQUNUQyxXQUFXLEVBQ1hDLGFBQWEsRUFDYkMsUUFBUSxFQUNSQyxLQUFLLEVBQ0xDLEtBQUssRUFDTixHQUFHLENBQUMsQ0FBQyxFQUNOQyxLQUFLLEVBQ0xDLE1BQU1DLGFBQWEsRUFDbkJDLFFBQVEsRUFDUkMsV0FBV0MsaUJBQUksRUFDaEIsR0FBR2xCO0lBRUosTUFBTW1CLFlBQVlkLFNBQVNlLGNBQVk7SUFDdkMsTUFBTUMsWUFBWWYsU0FBU2dCLGNBQVk7SUFFdkMsTUFBTVIsT0FBT0MsaUJBQWlCZDtJQUM5QixNQUFNLENBQUNzQixhQUFhQyxlQUFlLEdBQUdDLElBQUFBLGVBQVE7SUFDOUMsTUFBTSxDQUFDQyxXQUFXQyxhQUFhLEdBQUdGLElBQUFBLGVBQVE7SUFDMUMsTUFBTSxDQUFDRyxnQkFBZ0JDLGtCQUFrQixHQUFHSixJQUFBQSxlQUFRLEVBQUM7SUFFckQsTUFBTUssbUJBQW1CQyxJQUFBQSxrQkFBVyxFQUNsQyxDQUFDQyxPQUFPQztRQUNOLE9BQU9oQixTQUFTZSxPQUFPO1lBQUUsR0FBR0MsT0FBTztZQUFFUDtZQUFXVjtRQUFTO0lBQzNELEdBQ0E7UUFBQ0M7UUFBVUQ7UUFBVVU7S0FBVTtJQUdqQyxNQUFNLEVBQUVRLFlBQVksRUFBRUMsWUFBWSxFQUFFQyxRQUFRLEVBQUVDLFNBQVMsRUFBRUwsS0FBSyxFQUFFLEdBQUdNLElBQUFBLGlCQUFRLEVBQVM7UUFDbEYvQjtRQUNBTztRQUNBRyxVQUFVYTtJQUNaO0lBRUEsTUFBTVMsZUFBZVIsSUFBQUEsa0JBQVcsRUFDOUIsQ0FBQ1M7UUFDQyxJQUFJO1lBQ0YsSUFBSTlCLFVBQVU7WUFDZGMsZUFBZWdCO1lBRWZKLFNBQVNJLE1BQU1DLEtBQUtDLEtBQUssQ0FBQ0YsT0FBTztZQUNqQ2IsYUFBYWdCO1FBQ2YsRUFBRSxPQUFPQyxHQUFHO1lBQ1ZqQixhQUFhaUI7UUFDZjtJQUNGLEdBQ0E7UUFBQ2xDO1FBQVUwQjtRQUFVWjtLQUFlO0lBR3RDcUIsSUFBQUEsZ0JBQVMsRUFBQztRQUNSLElBQUk7WUFDRixNQUFNQyxXQUFXZCxTQUFTQSxNQUFNZSxRQUFRLEdBQUdDLE1BQU0sR0FBRztZQUNwRCxJQUFJcEIsZ0JBQWdCO2dCQUNsQkosZUFBZXNCLFdBQVdMLEtBQUtRLFNBQVMsQ0FBQ2pCLE9BQU8sTUFBTSxLQUFLO1lBQzdELE9BQU87Z0JBQ0xSLGVBQWVpQixLQUFLUSxTQUFTLENBQUNILFdBQVdkLFFBQVFHLGNBQWMsTUFBTTtnQkFDckVOLGtCQUFrQjtZQUNwQjtRQUNGLEVBQUUsT0FBT2UsR0FBRztZQUNWakIsYUFBYWlCO1FBQ2Y7SUFDRixHQUFHO1FBQUNUO1FBQWNIO1FBQU9KO0tBQWU7SUFFeEMscUJBQ0UsNkJBQUNzQjtRQUNDL0MsV0FBVztZQUNUZ0Qsc0JBQWM7WUFDZHJEO1lBQ0FLO1lBQ0FrQyxhQUFhO1lBQ2IzQixZQUFZO1NBQ2IsQ0FDRTBDLE1BQU0sQ0FBQ0MsU0FDUEMsSUFBSSxDQUFDO1FBQ1IzQyxPQUFPO1lBQ0wsR0FBR0EsS0FBSztZQUNSQztRQUNGO3FCQUVBLDZCQUFDTztRQUFVb0MsU0FBU3JCO1FBQWNHLFdBQVdBO3NCQUM3Qyw2QkFBQ2hCO1FBQVVtQyxTQUFTLENBQUMsTUFBTSxFQUFFMUMsS0FBSyxDQUFDO1FBQUVELE9BQU9BO1FBQU9HLFVBQVVBO3NCQUM3RCw2QkFBQ3lDLHNCQUFVO1FBQ1RDLGlCQUFnQjtRQUNoQkMsVUFBVXBCO1FBQ1ZOLFNBQVN4QjtRQUNUQyxVQUFVQTtRQUNWc0IsT0FBT1Q7c0JBRVQsNkJBQUNxQyx5QkFBZ0I7UUFBQ3BELGFBQWFBO1FBQWFNLE1BQU1BO1FBQU1rQixPQUFPQTs7QUFHckU7TUFFQSxXQUFlNkIsSUFBQUEsc0JBQWEsRUFBQzlEIn0=