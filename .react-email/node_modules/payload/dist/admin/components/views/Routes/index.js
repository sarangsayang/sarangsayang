"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Routes", {
    enumerable: true,
    get: function() {
        return Routes;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _api = require("../../../api");
const _Loading = require("../../elements/Loading");
const _StayLoggedIn = /*#__PURE__*/ _interop_require_default(require("../../modals/StayLoggedIn"));
const _Default = /*#__PURE__*/ _interop_require_default(require("../../templates/Default"));
const _ActionsProvider = require("../../utilities/ActionsProvider");
const _Auth = require("../../utilities/Auth");
const _Config = require("../../utilities/Config");
const _DocumentInfo = require("../../utilities/DocumentInfo");
const _Locale = require("../../utilities/Locale");
const _NotFound = /*#__PURE__*/ _interop_require_default(require("../NotFound"));
const _Unauthorized = /*#__PURE__*/ _interop_require_default(require("../Unauthorized"));
const _collections = require("./collections");
const _custom = require("./custom");
const _globals = require("./globals");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// @ts-expect-error Just TypeScript being broken // TODO: Open TypeScript issue
const Dashboard = /*#__PURE__*/ (0, _react.lazy)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../Dashboard"))));
// @ts-expect-error Just TypeScript being broken // TODO: Open TypeScript issue
const ForgotPassword = /*#__PURE__*/ (0, _react.lazy)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../ForgotPassword"))));
// @ts-expect-error Just TypeScript being broken // TODO: Open TypeScript issue
const Login = /*#__PURE__*/ (0, _react.lazy)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../Login"))));
// @ts-expect-error Just TypeScript being broken // TODO: Open TypeScript issue
const Logout = /*#__PURE__*/ (0, _react.lazy)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../Logout"))));
// @ts-expect-error Just TypeScript being broken // TODO: Open TypeScript issue
const Verify = /*#__PURE__*/ (0, _react.lazy)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../Verify"))));
// @ts-expect-error Just TypeScript being broken // TODO: Open TypeScript issue
const CreateFirstUser = /*#__PURE__*/ (0, _react.lazy)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../CreateFirstUser"))));
// @ts-expect-error Just TypeScript being broken // TODO: Open TypeScript issue
const ResetPassword = /*#__PURE__*/ (0, _react.lazy)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../ResetPassword"))));
// @ts-expect-error Just TypeScript being broken // TODO: Open TypeScript issue
const Account = /*#__PURE__*/ (0, _react.lazy)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../Account"))));
const Routes = ()=>{
    const [initialized, setInitialized] = (0, _react.useState)(null);
    const { permissions, refreshCookie, user } = (0, _Auth.useAuth)();
    const { i18n } = (0, _reacti18next.useTranslation)();
    const { code: locale } = (0, _Locale.useLocale)();
    const canAccessAdmin = permissions?.canAccessAdmin;
    const config = (0, _Config.useConfig)();
    const { admin: { inactivityRoute: logoutInactivityRoute, logoutRoute, user: userSlug }, collections, globals, routes } = config;
    const isLoadingUser = Boolean(typeof user === 'undefined' || user && typeof canAccessAdmin === 'undefined');
    const userCollection = collections.find(({ slug })=>slug === userSlug);
    (0, _react.useEffect)(()=>{
        if (userCollection && !userCollection?.auth?.disableLocalStrategy) {
            const { slug } = userCollection;
            _api.requests.get(`${routes.api}/${slug}/init`, {
                headers: {
                    'Accept-Language': i18n.language
                }
            }).then((res)=>res.json().then((data)=>{
                    if (data && 'initialized' in data) {
                        setInitialized(data.initialized);
                    }
                }));
        } else {
            setInitialized(true);
        }
    }, [
        i18n.language,
        routes,
        userCollection
    ]);
    return /*#__PURE__*/ _react.default.createElement(_react.Suspense, {
        fallback: /*#__PURE__*/ _react.default.createElement(_Loading.LoadingOverlayToggle, {
            name: "route-suspense",
            show: true
        })
    }, /*#__PURE__*/ _react.default.createElement(_Loading.LoadingOverlayToggle, {
        name: "route-loader",
        show: isLoadingUser
    }), /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Route, {
        path: routes.admin,
        render: ({ match })=>{
            if (initialized === false) {
                return /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Switch, null, /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Route, {
                    path: `${match.url}/create-first-user`
                }, /*#__PURE__*/ _react.default.createElement(CreateFirstUser, {
                    setInitialized: setInitialized
                })), /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Route, null, /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Redirect, {
                    to: `${match.url}/create-first-user`
                })));
            }
            if (initialized === true && !isLoadingUser) {
                return /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Switch, null, /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Route, {
                    path: `${match.url}/create-first-user`
                }, /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Redirect, {
                    to: `${match.url}/`
                })), (0, _custom.customRoutes)({
                    canAccessAdmin,
                    config,
                    match,
                    user
                }), /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Route, {
                    path: `${match.url}/login`
                }, /*#__PURE__*/ _react.default.createElement(Login, null)), /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Route, {
                    path: `${match.url}${logoutRoute}`
                }, /*#__PURE__*/ _react.default.createElement(Logout, null)), /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Route, {
                    path: `${match.url}${logoutInactivityRoute}`
                }, /*#__PURE__*/ _react.default.createElement(Logout, {
                    inactivity: true
                })), !userCollection?.auth?.disableLocalStrategy && /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Route, {
                    path: `${match.url}/forgot`
                }, /*#__PURE__*/ _react.default.createElement(ForgotPassword, null)), !userCollection?.auth?.disableLocalStrategy && /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Route, {
                    path: `${match.url}/reset/:token`
                }, /*#__PURE__*/ _react.default.createElement(ResetPassword, null)), collections.map((collection)=>{
                    if (collection?.auth?.verify && !collection.auth.disableLocalStrategy) {
                        return /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Route, {
                            exact: true,
                            key: `${collection.slug}-verify`,
                            path: `${match.url}/${collection.slug}/verify/:token`
                        }, /*#__PURE__*/ _react.default.createElement(Verify, {
                            collection: collection
                        }));
                    }
                    return null;
                }), /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Route, null, user ? /*#__PURE__*/ _react.default.createElement(_react.Fragment, null, canAccessAdmin && /*#__PURE__*/ _react.default.createElement(_ActionsProvider.ActionsProvider, null, /*#__PURE__*/ _react.default.createElement(_Default.default, null, /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Switch, null, /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Route, {
                    exact: true,
                    path: `${match.url}/`
                }, /*#__PURE__*/ _react.default.createElement(Dashboard, null)), /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Route, {
                    path: `${match.url}/account`
                }, /*#__PURE__*/ _react.default.createElement(_DocumentInfo.DocumentInfoProvider, {
                    collection: collections.find(({ slug })=>slug === userSlug),
                    id: user.id
                }, /*#__PURE__*/ _react.default.createElement(Account, null))), (0, _collections.collectionRoutes)({
                    collections,
                    match,
                    permissions,
                    user
                }), (0, _globals.globalRoutes)({
                    globals,
                    locale,
                    match,
                    permissions,
                    user
                }), /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Route, {
                    path: `${match.url}*`
                }, /*#__PURE__*/ _react.default.createElement(_NotFound.default, null))))), canAccessAdmin === false && /*#__PURE__*/ _react.default.createElement(_Unauthorized.default, null)) : /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Redirect, {
                    to: `${match.url}/login${window.location.pathname.startsWith(routes.admin) ? `?redirect=${encodeURIComponent(window.location.pathname.replace(routes.admin, ''))}` : ''}`
                })), /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Route, {
                    path: `${match.url}*`
                }, /*#__PURE__*/ _react.default.createElement(_NotFound.default, null)));
            }
            return null;
        }
    }), /*#__PURE__*/ _react.default.createElement(_StayLoggedIn.default, {
        refreshCookie: refreshCookie
    }));
};

//# sourceMappingURL=data:application/json;base64,