"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _forgotPassword = /*#__PURE__*/ _interop_require_default(require("../forgotPassword"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function localForgotPassword(payload, options) {
    const { collection: collectionSlug, context, data, disableEmail, expiration, req = {} } = options;
    (0, _setRequestContext.setRequestContext)(req, context);
    const collection = payload.collections[collectionSlug];
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Forgot Password Operation.`);
    }
    req.payloadAPI = req.payloadAPI || 'local';
    req.payload = payload;
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _forgotPassword.default)({
        collection,
        data,
        disableEmail,
        expiration,
        req
    });
}
const _default = localForgotPassword;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hdXRoL29wZXJhdGlvbnMvbG9jYWwvZm9yZ290UGFzc3dvcmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBHZW5lcmF0ZWRUeXBlcywgUmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLidcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkIH0gZnJvbSAnLi4vLi4vLi4vcGF5bG9hZCdcbmltcG9ydCB0eXBlIHsgUmVzdWx0IH0gZnJvbSAnLi4vZm9yZ290UGFzc3dvcmQnXG5cbmltcG9ydCB7IGdldERhdGFMb2FkZXIgfSBmcm9tICcuLi8uLi8uLi9jb2xsZWN0aW9ucy9kYXRhbG9hZGVyJ1xuaW1wb3J0IHsgQVBJRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMnXG5pbXBvcnQgeyBzZXRSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3Mvc2V0UmVxdWVzdENvbnRleHQnXG5pbXBvcnQgeyBpMThuSW5pdCB9IGZyb20gJy4uLy4uLy4uL3RyYW5zbGF0aW9ucy9pbml0J1xuaW1wb3J0IGZvcmdvdFBhc3N3b3JkIGZyb20gJy4uL2ZvcmdvdFBhc3N3b3JkJ1xuXG5leHBvcnQgdHlwZSBPcHRpb25zPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4gPSB7XG4gIGNvbGxlY3Rpb246IFRcbiAgY29udGV4dD86IFJlcXVlc3RDb250ZXh0XG4gIGRhdGE6IHtcbiAgICBlbWFpbDogc3RyaW5nXG4gIH1cbiAgZGlzYWJsZUVtYWlsPzogYm9vbGVhblxuICBleHBpcmF0aW9uPzogbnVtYmVyXG4gIHJlcT86IFBheWxvYWRSZXF1ZXN0XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvY2FsRm9yZ290UGFzc3dvcmQ8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogT3B0aW9uczxUPixcbik6IFByb21pc2U8UmVzdWx0PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uU2x1ZyxcbiAgICBjb250ZXh0LFxuICAgIGRhdGEsXG4gICAgZGlzYWJsZUVtYWlsLFxuICAgIGV4cGlyYXRpb24sXG4gICAgcmVxID0ge30gYXMgUGF5bG9hZFJlcXVlc3QsXG4gIH0gPSBvcHRpb25zXG4gIHNldFJlcXVlc3RDb250ZXh0KHJlcSwgY29udGV4dClcblxuICBjb25zdCBjb2xsZWN0aW9uID0gcGF5bG9hZC5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uU2x1Z11cblxuICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoXG4gICAgICBgVGhlIGNvbGxlY3Rpb24gd2l0aCBzbHVnICR7U3RyaW5nKFxuICAgICAgICBjb2xsZWN0aW9uU2x1ZyxcbiAgICAgICl9IGNhbid0IGJlIGZvdW5kLiBGb3Jnb3QgUGFzc3dvcmQgT3BlcmF0aW9uLmAsXG4gICAgKVxuICB9XG5cbiAgcmVxLnBheWxvYWRBUEkgPSByZXEucGF5bG9hZEFQSSB8fCAnbG9jYWwnXG4gIHJlcS5wYXlsb2FkID0gcGF5bG9hZFxuICByZXEuaTE4biA9IGkxOG5Jbml0KHBheWxvYWQuY29uZmlnLmkxOG4pXG5cbiAgaWYgKCFyZXEudCkgcmVxLnQgPSByZXEuaTE4bi50XG4gIGlmICghcmVxLnBheWxvYWREYXRhTG9hZGVyKSByZXEucGF5bG9hZERhdGFMb2FkZXIgPSBnZXREYXRhTG9hZGVyKHJlcSlcblxuICByZXR1cm4gZm9yZ290UGFzc3dvcmQoe1xuICAgIGNvbGxlY3Rpb24sXG4gICAgZGF0YSxcbiAgICBkaXNhYmxlRW1haWwsXG4gICAgZXhwaXJhdGlvbixcbiAgICByZXEsXG4gIH0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsRm9yZ290UGFzc3dvcmRcbiJdLCJuYW1lcyI6WyJsb2NhbEZvcmdvdFBhc3N3b3JkIiwicGF5bG9hZCIsIm9wdGlvbnMiLCJjb2xsZWN0aW9uIiwiY29sbGVjdGlvblNsdWciLCJjb250ZXh0IiwiZGF0YSIsImRpc2FibGVFbWFpbCIsImV4cGlyYXRpb24iLCJyZXEiLCJzZXRSZXF1ZXN0Q29udGV4dCIsImNvbGxlY3Rpb25zIiwiQVBJRXJyb3IiLCJTdHJpbmciLCJwYXlsb2FkQVBJIiwiaTE4biIsImkxOG5Jbml0IiwiY29uZmlnIiwidCIsInBheWxvYWREYXRhTG9hZGVyIiwiZ2V0RGF0YUxvYWRlciIsImZvcmdvdFBhc3N3b3JkIl0sIm1hcHBpbmdzIjoiOzs7OytCQThEQTs7O2VBQUE7Ozs0QkF6RDhCO3dCQUNMO21DQUNTO3NCQUNUO3VFQUNFOzs7Ozs7QUFhM0IsZUFBZUEsb0JBQ2JDLE9BQWdCLEVBQ2hCQyxPQUFtQjtJQUVuQixNQUFNLEVBQ0pDLFlBQVlDLGNBQWMsRUFDMUJDLE9BQU8sRUFDUEMsSUFBSSxFQUNKQyxZQUFZLEVBQ1pDLFVBQVUsRUFDVkMsTUFBTSxDQUFDLENBQW1CLEVBQzNCLEdBQUdQO0lBQ0pRLElBQUFBLG9DQUFpQixFQUFDRCxLQUFLSjtJQUV2QixNQUFNRixhQUFhRixRQUFRVSxXQUFXLENBQUNQLGVBQWU7SUFFdEQsSUFBSSxDQUFDRCxZQUFZO1FBQ2YsTUFBTSxJQUFJUyxnQkFBUSxDQUNoQixDQUFDLHlCQUF5QixFQUFFQyxPQUMxQlQsZ0JBQ0EsMkNBQTJDLENBQUM7SUFFbEQ7SUFFQUssSUFBSUssVUFBVSxHQUFHTCxJQUFJSyxVQUFVLElBQUk7SUFDbkNMLElBQUlSLE9BQU8sR0FBR0E7SUFDZFEsSUFBSU0sSUFBSSxHQUFHQyxJQUFBQSxjQUFRLEVBQUNmLFFBQVFnQixNQUFNLENBQUNGLElBQUk7SUFFdkMsSUFBSSxDQUFDTixJQUFJUyxDQUFDLEVBQUVULElBQUlTLENBQUMsR0FBR1QsSUFBSU0sSUFBSSxDQUFDRyxDQUFDO0lBQzlCLElBQUksQ0FBQ1QsSUFBSVUsaUJBQWlCLEVBQUVWLElBQUlVLGlCQUFpQixHQUFHQyxJQUFBQSx5QkFBYSxFQUFDWDtJQUVsRSxPQUFPWSxJQUFBQSx1QkFBYyxFQUFDO1FBQ3BCbEI7UUFDQUc7UUFDQUM7UUFDQUM7UUFDQUM7SUFDRjtBQUNGO01BRUEsV0FBZVQifQ==