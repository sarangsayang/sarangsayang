"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _login = /*#__PURE__*/ _interop_require_default(require("../login"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function localLogin(payload, options) {
    const { collection: collectionSlug, context, data, depth, fallbackLocale: fallbackLocaleArg = options?.req?.fallbackLocale, locale: localeArg = null, overrideAccess = true, req = {}, res, showHiddenFields } = options;
    (0, _setRequestContext.setRequestContext)(req, context);
    const collection = payload.collections[collectionSlug];
    const localizationConfig = payload?.config?.localization;
    const defaultLocale = localizationConfig ? localizationConfig.defaultLocale : null;
    const locale = localeArg || req?.locale || defaultLocale;
    const fallbackLocale = localizationConfig ? localizationConfig.locales.find(({ code })=>locale === code)?.fallbackLocale : null;
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Login Operation.`);
    }
    req.payloadAPI = req.payloadAPI || 'local';
    req.payload = payload;
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    const args = {
        collection,
        data,
        depth,
        overrideAccess,
        req,
        res,
        showHiddenFields
    };
    if (locale) args.req.locale = locale;
    if (fallbackLocale) {
        args.req.fallbackLocale = typeof fallbackLocaleArg !== 'undefined' ? fallbackLocaleArg : fallbackLocale || defaultLocale;
    }
    return (0, _login.default)(args);
}
const _default = localLogin;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hdXRoL29wZXJhdGlvbnMvbG9jYWwvbG9naW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnXG5cbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QsIFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy90eXBlcydcbmltcG9ydCB0eXBlIHsgR2VuZXJhdGVkVHlwZXMgfSBmcm9tICcuLi8uLi8uLi9pbmRleCdcbmltcG9ydCB0eXBlIHsgUGF5bG9hZCB9IGZyb20gJy4uLy4uLy4uL3BheWxvYWQnXG5pbXBvcnQgdHlwZSB7IFJlc3VsdCB9IGZyb20gJy4uL2xvZ2luJ1xuXG5pbXBvcnQgeyBnZXREYXRhTG9hZGVyIH0gZnJvbSAnLi4vLi4vLi4vY29sbGVjdGlvbnMvZGF0YWxvYWRlcidcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJ1xuaW1wb3J0IHsgc2V0UmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3NldFJlcXVlc3RDb250ZXh0J1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbnMvaW5pdCdcbmltcG9ydCBsb2dpbiBmcm9tICcuLi9sb2dpbidcblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUU2x1ZyBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPiA9IHtcbiAgY29sbGVjdGlvbjogVFNsdWdcbiAgY29udGV4dD86IFJlcXVlc3RDb250ZXh0XG4gIGRhdGE6IHtcbiAgICBlbWFpbDogc3RyaW5nXG4gICAgcGFzc3dvcmQ6IHN0cmluZ1xuICB9XG4gIGRlcHRoPzogbnVtYmVyXG4gIGZhbGxiYWNrTG9jYWxlPzogc3RyaW5nXG4gIGxvY2FsZT86IHN0cmluZ1xuICBvdmVycmlkZUFjY2Vzcz86IGJvb2xlYW5cbiAgcmVxPzogUGF5bG9hZFJlcXVlc3RcbiAgcmVzPzogUmVzcG9uc2VcbiAgc2hvd0hpZGRlbkZpZWxkcz86IGJvb2xlYW5cbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9jYWxMb2dpbjxUU2x1ZyBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogT3B0aW9uczxUU2x1Zz4sXG4pOiBQcm9taXNlPFJlc3VsdCAmIHsgdXNlcjogR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ11bVFNsdWddIH0+IHtcbiAgY29uc3Qge1xuICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25TbHVnLFxuICAgIGNvbnRleHQsXG4gICAgZGF0YSxcbiAgICBkZXB0aCxcbiAgICBmYWxsYmFja0xvY2FsZTogZmFsbGJhY2tMb2NhbGVBcmcgPSBvcHRpb25zPy5yZXE/LmZhbGxiYWNrTG9jYWxlLFxuICAgIGxvY2FsZTogbG9jYWxlQXJnID0gbnVsbCxcbiAgICBvdmVycmlkZUFjY2VzcyA9IHRydWUsXG4gICAgcmVxID0ge30gYXMgUGF5bG9hZFJlcXVlc3QsXG4gICAgcmVzLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gIH0gPSBvcHRpb25zXG4gIHNldFJlcXVlc3RDb250ZXh0KHJlcSwgY29udGV4dClcblxuICBjb25zdCBjb2xsZWN0aW9uID0gcGF5bG9hZC5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uU2x1Z11cbiAgY29uc3QgbG9jYWxpemF0aW9uQ29uZmlnID0gcGF5bG9hZD8uY29uZmlnPy5sb2NhbGl6YXRpb25cbiAgY29uc3QgZGVmYXVsdExvY2FsZSA9IGxvY2FsaXphdGlvbkNvbmZpZyA/IGxvY2FsaXphdGlvbkNvbmZpZy5kZWZhdWx0TG9jYWxlIDogbnVsbFxuICBjb25zdCBsb2NhbGUgPSBsb2NhbGVBcmcgfHwgcmVxPy5sb2NhbGUgfHwgZGVmYXVsdExvY2FsZVxuICBjb25zdCBmYWxsYmFja0xvY2FsZSA9IGxvY2FsaXphdGlvbkNvbmZpZ1xuICAgID8gbG9jYWxpemF0aW9uQ29uZmlnLmxvY2FsZXMuZmluZCgoeyBjb2RlIH0pID0+IGxvY2FsZSA9PT0gY29kZSk/LmZhbGxiYWNrTG9jYWxlXG4gICAgOiBudWxsXG5cbiAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEFQSUVycm9yKFxuICAgICAgYFRoZSBjb2xsZWN0aW9uIHdpdGggc2x1ZyAke1N0cmluZyhjb2xsZWN0aW9uU2x1Zyl9IGNhbid0IGJlIGZvdW5kLiBMb2dpbiBPcGVyYXRpb24uYCxcbiAgICApXG4gIH1cblxuICByZXEucGF5bG9hZEFQSSA9IHJlcS5wYXlsb2FkQVBJIHx8ICdsb2NhbCdcbiAgcmVxLnBheWxvYWQgPSBwYXlsb2FkXG4gIHJlcS5pMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcblxuICBpZiAoIXJlcS50KSByZXEudCA9IHJlcS5pMThuLnRcbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIGNvbnN0IGFyZ3MgPSB7XG4gICAgY29sbGVjdGlvbixcbiAgICBkYXRhLFxuICAgIGRlcHRoLFxuICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgIHJlcSxcbiAgICByZXMsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgfVxuXG4gIGlmIChsb2NhbGUpIGFyZ3MucmVxLmxvY2FsZSA9IGxvY2FsZVxuICBpZiAoZmFsbGJhY2tMb2NhbGUpIHtcbiAgICBhcmdzLnJlcS5mYWxsYmFja0xvY2FsZSA9XG4gICAgICB0eXBlb2YgZmFsbGJhY2tMb2NhbGVBcmcgIT09ICd1bmRlZmluZWQnID8gZmFsbGJhY2tMb2NhbGVBcmcgOiBmYWxsYmFja0xvY2FsZSB8fCBkZWZhdWx0TG9jYWxlXG4gIH1cblxuICByZXR1cm4gbG9naW48VFNsdWc+KGFyZ3MpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsTG9naW5cbiJdLCJuYW1lcyI6WyJsb2NhbExvZ2luIiwicGF5bG9hZCIsIm9wdGlvbnMiLCJjb2xsZWN0aW9uIiwiY29sbGVjdGlvblNsdWciLCJjb250ZXh0IiwiZGF0YSIsImRlcHRoIiwiZmFsbGJhY2tMb2NhbGUiLCJmYWxsYmFja0xvY2FsZUFyZyIsInJlcSIsImxvY2FsZSIsImxvY2FsZUFyZyIsIm92ZXJyaWRlQWNjZXNzIiwicmVzIiwic2hvd0hpZGRlbkZpZWxkcyIsInNldFJlcXVlc3RDb250ZXh0IiwiY29sbGVjdGlvbnMiLCJsb2NhbGl6YXRpb25Db25maWciLCJjb25maWciLCJsb2NhbGl6YXRpb24iLCJkZWZhdWx0TG9jYWxlIiwibG9jYWxlcyIsImZpbmQiLCJjb2RlIiwiQVBJRXJyb3IiLCJTdHJpbmciLCJwYXlsb2FkQVBJIiwiaTE4biIsImkxOG5Jbml0IiwidCIsInBheWxvYWREYXRhTG9hZGVyIiwiZ2V0RGF0YUxvYWRlciIsImFyZ3MiLCJsb2dpbiJdLCJtYXBwaW5ncyI6Ijs7OzsrQkF1RkE7OztlQUFBOzs7NEJBaEY4Qjt3QkFDTDttQ0FDUztzQkFDVDs4REFDUDs7Ozs7O0FBa0JsQixlQUFlQSxXQUNiQyxPQUFnQixFQUNoQkMsT0FBdUI7SUFFdkIsTUFBTSxFQUNKQyxZQUFZQyxjQUFjLEVBQzFCQyxPQUFPLEVBQ1BDLElBQUksRUFDSkMsS0FBSyxFQUNMQyxnQkFBZ0JDLG9CQUFvQlAsU0FBU1EsS0FBS0YsY0FBYyxFQUNoRUcsUUFBUUMsWUFBWSxJQUFJLEVBQ3hCQyxpQkFBaUIsSUFBSSxFQUNyQkgsTUFBTSxDQUFDLENBQW1CLEVBQzFCSSxHQUFHLEVBQ0hDLGdCQUFnQixFQUNqQixHQUFHYjtJQUNKYyxJQUFBQSxvQ0FBaUIsRUFBQ04sS0FBS0w7SUFFdkIsTUFBTUYsYUFBYUYsUUFBUWdCLFdBQVcsQ0FBQ2IsZUFBZTtJQUN0RCxNQUFNYyxxQkFBcUJqQixTQUFTa0IsUUFBUUM7SUFDNUMsTUFBTUMsZ0JBQWdCSCxxQkFBcUJBLG1CQUFtQkcsYUFBYSxHQUFHO0lBQzlFLE1BQU1WLFNBQVNDLGFBQWFGLEtBQUtDLFVBQVVVO0lBQzNDLE1BQU1iLGlCQUFpQlUscUJBQ25CQSxtQkFBbUJJLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLENBQUMsRUFBRUMsSUFBSSxFQUFFLEdBQUtiLFdBQVdhLE9BQU9oQixpQkFDaEU7SUFFSixJQUFJLENBQUNMLFlBQVk7UUFDZixNQUFNLElBQUlzQixnQkFBUSxDQUNoQixDQUFDLHlCQUF5QixFQUFFQyxPQUFPdEIsZ0JBQWdCLGlDQUFpQyxDQUFDO0lBRXpGO0lBRUFNLElBQUlpQixVQUFVLEdBQUdqQixJQUFJaUIsVUFBVSxJQUFJO0lBQ25DakIsSUFBSVQsT0FBTyxHQUFHQTtJQUNkUyxJQUFJa0IsSUFBSSxHQUFHQyxJQUFBQSxjQUFRLEVBQUM1QixRQUFRa0IsTUFBTSxDQUFDUyxJQUFJO0lBRXZDLElBQUksQ0FBQ2xCLElBQUlvQixDQUFDLEVBQUVwQixJQUFJb0IsQ0FBQyxHQUFHcEIsSUFBSWtCLElBQUksQ0FBQ0UsQ0FBQztJQUM5QixJQUFJLENBQUNwQixJQUFJcUIsaUJBQWlCLEVBQUVyQixJQUFJcUIsaUJBQWlCLEdBQUdDLElBQUFBLHlCQUFhLEVBQUN0QjtJQUVsRSxNQUFNdUIsT0FBTztRQUNYOUI7UUFDQUc7UUFDQUM7UUFDQU07UUFDQUg7UUFDQUk7UUFDQUM7SUFDRjtJQUVBLElBQUlKLFFBQVFzQixLQUFLdkIsR0FBRyxDQUFDQyxNQUFNLEdBQUdBO0lBQzlCLElBQUlILGdCQUFnQjtRQUNsQnlCLEtBQUt2QixHQUFHLENBQUNGLGNBQWMsR0FDckIsT0FBT0Msc0JBQXNCLGNBQWNBLG9CQUFvQkQsa0JBQWtCYTtJQUNyRjtJQUVBLE9BQU9hLElBQUFBLGNBQUssRUFBUUQ7QUFDdEI7TUFFQSxXQUFlakMifQ==