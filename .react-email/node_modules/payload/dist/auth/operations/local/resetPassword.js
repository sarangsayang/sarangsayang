"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _resetPassword = /*#__PURE__*/ _interop_require_default(require("../resetPassword"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function localResetPassword(payload, options) {
    const { collection: collectionSlug, context, data, overrideAccess, req = {} } = options;
    (0, _setRequestContext.setRequestContext)(req, context);
    const collection = payload.collections[collectionSlug];
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Reset Password Operation.`);
    }
    req.payload = payload;
    req.payloadAPI = req.payloadAPI || 'local';
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _resetPassword.default)({
        collection,
        data,
        overrideAccess,
        req
    });
}
const _default = localResetPassword;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hdXRoL29wZXJhdGlvbnMvbG9jYWwvcmVzZXRQYXNzd29yZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEdlbmVyYXRlZFR5cGVzLCBSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uLydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkIH0gZnJvbSAnLi4vLi4vLi4vcGF5bG9hZCdcbmltcG9ydCB0eXBlIHsgUmVzdWx0IH0gZnJvbSAnLi4vcmVzZXRQYXNzd29yZCdcblxuaW1wb3J0IHsgZ2V0RGF0YUxvYWRlciB9IGZyb20gJy4uLy4uLy4uL2NvbGxlY3Rpb25zL2RhdGFsb2FkZXInXG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycydcbmltcG9ydCB7IHNldFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy9zZXRSZXF1ZXN0Q29udGV4dCdcbmltcG9ydCB7IGkxOG5Jbml0IH0gZnJvbSAnLi4vLi4vLi4vdHJhbnNsYXRpb25zL2luaXQnXG5pbXBvcnQgcmVzZXRQYXNzd29yZCBmcm9tICcuLi9yZXNldFBhc3N3b3JkJ1xuXG5leHBvcnQgdHlwZSBPcHRpb25zPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4gPSB7XG4gIGNvbGxlY3Rpb246IFRcbiAgY29udGV4dD86IFJlcXVlc3RDb250ZXh0XG4gIGRhdGE6IHtcbiAgICBwYXNzd29yZDogc3RyaW5nXG4gICAgdG9rZW46IHN0cmluZ1xuICB9XG4gIG92ZXJyaWRlQWNjZXNzOiBib29sZWFuXG4gIHJlcT86IFBheWxvYWRSZXF1ZXN0XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvY2FsUmVzZXRQYXNzd29yZDxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBPcHRpb25zPFQ+LFxuKTogUHJvbWlzZTxSZXN1bHQ+IHtcbiAgY29uc3Qge1xuICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25TbHVnLFxuICAgIGNvbnRleHQsXG4gICAgZGF0YSxcbiAgICBvdmVycmlkZUFjY2VzcyxcbiAgICByZXEgPSB7fSBhcyBQYXlsb2FkUmVxdWVzdCxcbiAgfSA9IG9wdGlvbnNcblxuICBzZXRSZXF1ZXN0Q29udGV4dChyZXEsIGNvbnRleHQpXG5cbiAgY29uc3QgY29sbGVjdGlvbiA9IHBheWxvYWQuY29sbGVjdGlvbnNbY29sbGVjdGlvblNsdWddXG5cbiAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEFQSUVycm9yKFxuICAgICAgYFRoZSBjb2xsZWN0aW9uIHdpdGggc2x1ZyAke1N0cmluZyhcbiAgICAgICAgY29sbGVjdGlvblNsdWcsXG4gICAgICApfSBjYW4ndCBiZSBmb3VuZC4gUmVzZXQgUGFzc3dvcmQgT3BlcmF0aW9uLmAsXG4gICAgKVxuICB9XG5cbiAgcmVxLnBheWxvYWQgPSBwYXlsb2FkXG4gIHJlcS5wYXlsb2FkQVBJID0gcmVxLnBheWxvYWRBUEkgfHwgJ2xvY2FsJ1xuICByZXEuaTE4biA9IGkxOG5Jbml0KHBheWxvYWQuY29uZmlnLmkxOG4pXG5cbiAgaWYgKCFyZXEudCkgcmVxLnQgPSByZXEuaTE4bi50XG4gIGlmICghcmVxLnBheWxvYWREYXRhTG9hZGVyKSByZXEucGF5bG9hZERhdGFMb2FkZXIgPSBnZXREYXRhTG9hZGVyKHJlcSlcblxuICByZXR1cm4gcmVzZXRQYXNzd29yZCh7XG4gICAgY29sbGVjdGlvbixcbiAgICBkYXRhLFxuICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgIHJlcSxcbiAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxSZXNldFBhc3N3b3JkXG4iXSwibmFtZXMiOlsibG9jYWxSZXNldFBhc3N3b3JkIiwicGF5bG9hZCIsIm9wdGlvbnMiLCJjb2xsZWN0aW9uIiwiY29sbGVjdGlvblNsdWciLCJjb250ZXh0IiwiZGF0YSIsIm92ZXJyaWRlQWNjZXNzIiwicmVxIiwic2V0UmVxdWVzdENvbnRleHQiLCJjb2xsZWN0aW9ucyIsIkFQSUVycm9yIiwiU3RyaW5nIiwicGF5bG9hZEFQSSIsImkxOG4iLCJpMThuSW5pdCIsImNvbmZpZyIsInQiLCJwYXlsb2FkRGF0YUxvYWRlciIsImdldERhdGFMb2FkZXIiLCJyZXNldFBhc3N3b3JkIl0sIm1hcHBpbmdzIjoiOzs7OytCQTZEQTs7O2VBQUE7Ozs0QkF4RDhCO3dCQUNMO21DQUNTO3NCQUNUO3NFQUNDOzs7Ozs7QUFhMUIsZUFBZUEsbUJBQ2JDLE9BQWdCLEVBQ2hCQyxPQUFtQjtJQUVuQixNQUFNLEVBQ0pDLFlBQVlDLGNBQWMsRUFDMUJDLE9BQU8sRUFDUEMsSUFBSSxFQUNKQyxjQUFjLEVBQ2RDLE1BQU0sQ0FBQyxDQUFtQixFQUMzQixHQUFHTjtJQUVKTyxJQUFBQSxvQ0FBaUIsRUFBQ0QsS0FBS0g7SUFFdkIsTUFBTUYsYUFBYUYsUUFBUVMsV0FBVyxDQUFDTixlQUFlO0lBRXRELElBQUksQ0FBQ0QsWUFBWTtRQUNmLE1BQU0sSUFBSVEsZ0JBQVEsQ0FDaEIsQ0FBQyx5QkFBeUIsRUFBRUMsT0FDMUJSLGdCQUNBLDBDQUEwQyxDQUFDO0lBRWpEO0lBRUFJLElBQUlQLE9BQU8sR0FBR0E7SUFDZE8sSUFBSUssVUFBVSxHQUFHTCxJQUFJSyxVQUFVLElBQUk7SUFDbkNMLElBQUlNLElBQUksR0FBR0MsSUFBQUEsY0FBUSxFQUFDZCxRQUFRZSxNQUFNLENBQUNGLElBQUk7SUFFdkMsSUFBSSxDQUFDTixJQUFJUyxDQUFDLEVBQUVULElBQUlTLENBQUMsR0FBR1QsSUFBSU0sSUFBSSxDQUFDRyxDQUFDO0lBQzlCLElBQUksQ0FBQ1QsSUFBSVUsaUJBQWlCLEVBQUVWLElBQUlVLGlCQUFpQixHQUFHQyxJQUFBQSx5QkFBYSxFQUFDWDtJQUVsRSxPQUFPWSxJQUFBQSxzQkFBYSxFQUFDO1FBQ25CakI7UUFDQUc7UUFDQUM7UUFDQUM7SUFDRjtBQUNGO01BRUEsV0FBZVIifQ==