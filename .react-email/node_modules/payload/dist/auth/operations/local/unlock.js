"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _unlock = /*#__PURE__*/ _interop_require_default(require("../unlock"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function localUnlock(payload, options) {
    const { collection: collectionSlug, context, data, overrideAccess = true, req = {} } = options;
    (0, _setRequestContext.setRequestContext)(req, context);
    const collection = payload.collections[collectionSlug];
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Unlock Operation.`);
    }
    req.payload = payload;
    req.payloadAPI = req.payloadAPI || 'local';
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _unlock.default)({
        collection,
        data,
        overrideAccess,
        req
    });
}
const _default = localUnlock;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hdXRoL29wZXJhdGlvbnMvbG9jYWwvdW5sb2NrLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgR2VuZXJhdGVkVHlwZXMsIFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3MvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWQgfSBmcm9tICcuLi8uLi8uLi9wYXlsb2FkJ1xuXG5pbXBvcnQgeyBnZXREYXRhTG9hZGVyIH0gZnJvbSAnLi4vLi4vLi4vY29sbGVjdGlvbnMvZGF0YWxvYWRlcidcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJ1xuaW1wb3J0IHsgc2V0UmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3NldFJlcXVlc3RDb250ZXh0J1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbnMvaW5pdCdcbmltcG9ydCB1bmxvY2sgZnJvbSAnLi4vdW5sb2NrJ1xuXG5leHBvcnQgdHlwZSBPcHRpb25zPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4gPSB7XG4gIGNvbGxlY3Rpb246IFRcbiAgY29udGV4dD86IFJlcXVlc3RDb250ZXh0XG4gIGRhdGE6IHtcbiAgICBlbWFpbFxuICB9XG4gIG92ZXJyaWRlQWNjZXNzOiBib29sZWFuXG4gIHJlcT86IFBheWxvYWRSZXF1ZXN0XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvY2FsVW5sb2NrPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4oXG4gIHBheWxvYWQ6IFBheWxvYWQsXG4gIG9wdGlvbnM6IE9wdGlvbnM8VD4sXG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgY29uc3Qge1xuICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25TbHVnLFxuICAgIGNvbnRleHQsXG4gICAgZGF0YSxcbiAgICBvdmVycmlkZUFjY2VzcyA9IHRydWUsXG4gICAgcmVxID0ge30gYXMgUGF5bG9hZFJlcXVlc3QsXG4gIH0gPSBvcHRpb25zXG4gIHNldFJlcXVlc3RDb250ZXh0KHJlcSwgY29udGV4dClcblxuICBjb25zdCBjb2xsZWN0aW9uID0gcGF5bG9hZC5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uU2x1Z11cblxuICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoXG4gICAgICBgVGhlIGNvbGxlY3Rpb24gd2l0aCBzbHVnICR7U3RyaW5nKGNvbGxlY3Rpb25TbHVnKX0gY2FuJ3QgYmUgZm91bmQuIFVubG9jayBPcGVyYXRpb24uYCxcbiAgICApXG4gIH1cblxuICByZXEucGF5bG9hZCA9IHBheWxvYWRcbiAgcmVxLnBheWxvYWRBUEkgPSByZXEucGF5bG9hZEFQSSB8fCAnbG9jYWwnXG4gIHJlcS5pMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcblxuICBpZiAoIXJlcS50KSByZXEudCA9IHJlcS5pMThuLnRcbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIHJldHVybiB1bmxvY2soe1xuICAgIGNvbGxlY3Rpb24sXG4gICAgZGF0YSxcbiAgICBvdmVycmlkZUFjY2VzcyxcbiAgICByZXEsXG4gIH0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsVW5sb2NrXG4iXSwibmFtZXMiOlsibG9jYWxVbmxvY2siLCJwYXlsb2FkIiwib3B0aW9ucyIsImNvbGxlY3Rpb24iLCJjb2xsZWN0aW9uU2x1ZyIsImNvbnRleHQiLCJkYXRhIiwib3ZlcnJpZGVBY2Nlc3MiLCJyZXEiLCJzZXRSZXF1ZXN0Q29udGV4dCIsImNvbGxlY3Rpb25zIiwiQVBJRXJyb3IiLCJTdHJpbmciLCJwYXlsb2FkQVBJIiwiaTE4biIsImkxOG5Jbml0IiwiY29uZmlnIiwidCIsInBheWxvYWREYXRhTG9hZGVyIiwiZ2V0RGF0YUxvYWRlciIsInVubG9jayJdLCJtYXBwaW5ncyI6Ijs7OzsrQkF3REE7OztlQUFBOzs7NEJBcEQ4Qjt3QkFDTDttQ0FDUztzQkFDVDsrREFDTjs7Ozs7O0FBWW5CLGVBQWVBLFlBQ2JDLE9BQWdCLEVBQ2hCQyxPQUFtQjtJQUVuQixNQUFNLEVBQ0pDLFlBQVlDLGNBQWMsRUFDMUJDLE9BQU8sRUFDUEMsSUFBSSxFQUNKQyxpQkFBaUIsSUFBSSxFQUNyQkMsTUFBTSxDQUFDLENBQW1CLEVBQzNCLEdBQUdOO0lBQ0pPLElBQUFBLG9DQUFpQixFQUFDRCxLQUFLSDtJQUV2QixNQUFNRixhQUFhRixRQUFRUyxXQUFXLENBQUNOLGVBQWU7SUFFdEQsSUFBSSxDQUFDRCxZQUFZO1FBQ2YsTUFBTSxJQUFJUSxnQkFBUSxDQUNoQixDQUFDLHlCQUF5QixFQUFFQyxPQUFPUixnQkFBZ0Isa0NBQWtDLENBQUM7SUFFMUY7SUFFQUksSUFBSVAsT0FBTyxHQUFHQTtJQUNkTyxJQUFJSyxVQUFVLEdBQUdMLElBQUlLLFVBQVUsSUFBSTtJQUNuQ0wsSUFBSU0sSUFBSSxHQUFHQyxJQUFBQSxjQUFRLEVBQUNkLFFBQVFlLE1BQU0sQ0FBQ0YsSUFBSTtJQUV2QyxJQUFJLENBQUNOLElBQUlTLENBQUMsRUFBRVQsSUFBSVMsQ0FBQyxHQUFHVCxJQUFJTSxJQUFJLENBQUNHLENBQUM7SUFDOUIsSUFBSSxDQUFDVCxJQUFJVSxpQkFBaUIsRUFBRVYsSUFBSVUsaUJBQWlCLEdBQUdDLElBQUFBLHlCQUFhLEVBQUNYO0lBRWxFLE9BQU9ZLElBQUFBLGVBQU0sRUFBQztRQUNaakI7UUFDQUc7UUFDQUM7UUFDQUM7SUFDRjtBQUNGO01BRUEsV0FBZVIifQ==